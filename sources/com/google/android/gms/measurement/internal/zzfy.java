package com.google.android.gms.measurement.internal;

import com.google.android.gms.auth.api.proxy.AuthApiStatusCodes;
import com.google.android.gms.dynamite.descriptors.com.google.mlkit.dynamite.barcode.ModuleDescriptor;
import com.google.common.annotations.VisibleForTesting;
import com.medallia.digital.mobilesdk.l8;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

/* loaded from: classes.dex */
public final class zzfy {
    public static final zzfx zzA;
    public static final zzfx zzB;
    public static final zzfx zzC;
    public static final zzfx zzD;
    public static final zzfx zzE;
    public static final zzfx zzF;
    public static final zzfx zzG;
    public static final zzfx zzH;
    public static final zzfx zzI;
    public static final zzfx zzJ;
    public static final zzfx zzK;
    public static final zzfx zzL;
    public static final zzfx zzM;
    public static final zzfx zzN;
    public static final zzfx zzO;
    public static final zzfx zzP;
    public static final zzfx zzQ;
    public static final zzfx zzR;
    public static final zzfx zzS;
    public static final zzfx zzT;
    public static final zzfx zzU;
    public static final zzfx zzV;
    public static final zzfx zzW;
    public static final zzfx zzX;
    public static final zzfx zzY;
    public static final zzfx zzZ;
    public static final zzfx zza;
    public static final zzfx zzaA;
    public static final zzfx zzaB;
    public static final zzfx zzaC;
    public static final zzfx zzaD;
    public static final zzfx zzaE;
    public static final zzfx zzaF;
    public static final zzfx zzaG;
    public static final zzfx zzaH;
    public static final zzfx zzaI;
    public static final zzfx zzaJ;
    public static final zzfx zzaK;
    public static final zzfx zzaL;
    public static final zzfx zzaM;
    public static final zzfx zzaN;
    public static final zzfx zzaO;
    public static final zzfx zzaP;
    public static final zzfx zzaQ;
    public static final zzfx zzaR;
    public static final zzfx zzaS;
    public static final zzfx zzaT;
    public static final zzfx zzaU;
    public static final zzfx zzaV;
    public static final zzfx zzaW;
    public static final zzfx zzaX;
    public static final zzfx zzaY;
    public static final zzfx zzaZ;
    public static final zzfx zzaa;
    public static final zzfx zzab;
    public static final zzfx zzac;
    public static final zzfx zzad;
    public static final zzfx zzae;
    public static final zzfx zzaf;
    public static final zzfx zzag;
    public static final zzfx zzah;
    public static final zzfx zzai;
    public static final zzfx zzaj;
    public static final zzfx zzak;
    public static final zzfx zzal;
    public static final zzfx zzam;
    public static final zzfx zzan;
    public static final zzfx zzao;
    public static final zzfx zzap;
    public static final zzfx zzaq;
    public static final zzfx zzar;
    public static final zzfx zzas;
    public static final zzfx zzat;
    public static final zzfx zzau;
    public static final zzfx zzav;
    public static final zzfx zzaw;
    public static final zzfx zzax;
    public static final zzfx zzay;
    public static final zzfx zzaz;
    public static final zzfx zzb;
    public static final zzfx zzba;
    public static final zzfx zzbb;
    public static final zzfx zzbc;
    public static final zzfx zzbd;
    public static final zzfx zzbe;
    public static final zzfx zzbf;
    public static final zzfx zzbg;
    public static final zzfx zzbh;
    public static final zzfx zzbi;
    public static final zzfx zzbj;
    public static final zzfx zzbk;
    private static final List zzbl = Collections.synchronizedList(new ArrayList());
    public static final zzfx zzc;
    public static final zzfx zzd;
    public static final zzfx zze;
    public static final zzfx zzf;
    public static final zzfx zzg;
    public static final zzfx zzh;
    public static final zzfx zzi;
    public static final zzfx zzj;
    public static final zzfx zzk;
    public static final zzfx zzl;
    public static final zzfx zzm;
    public static final zzfx zzn;
    public static final zzfx zzo;
    public static final zzfx zzp;
    public static final zzfx zzq;
    public static final zzfx zzr;
    public static final zzfx zzs;
    public static final zzfx zzt;
    public static final zzfx zzu;
    public static final zzfx zzv;
    public static final zzfx zzw;
    public static final zzfx zzx;
    public static final zzfx zzy;
    public static final zzfx zzz;

    static {
        Collections.synchronizedSet(new HashSet());
        zza = zza("measurement.ad_id_cache_time", 10000L, 10000L, zzfq.zza, false);
        Long lValueOf = Long.valueOf(l8.b.c);
        zzb = zza("measurement.app_uninstalled_additional_ad_id_cache_time", lValueOf, lValueOf, zzbo.zza, false);
        zzc = zza("measurement.monitoring.sample_period_millis", 86400000L, 86400000L, zzcf.zza, false);
        zzd = zza("measurement.config.cache_time", 86400000L, lValueOf, zzcq.zza, false);
        zze = zza("measurement.config.url_scheme", "https", "https", zzdb.zza, false);
        zzf = zza("measurement.config.url_authority", "app-measurement.com", "app-measurement.com", zzdm.zza, false);
        zzg = zza("measurement.upload.max_bundles", 100, 100, zzdx.zza, false);
        zzh = zza("measurement.upload.max_batch_size", 65536, 65536, zzei.zza, false);
        zzi = zza("measurement.upload.max_bundle_size", 65536, 65536, zzet.zza, false);
        zzj = zza("measurement.upload.max_events_per_bundle", 1000, 1000, zzfe.zza, false);
        zzk = zza("measurement.upload.max_events_per_day", 100000, 100000, zzfp.zza, false);
        zzl = zza("measurement.upload.max_error_events_per_day", 1000, 1000, zzbv.zza, false);
        zzm = zza("measurement.upload.max_public_events_per_day", 50000, 50000, zzbw.zza, false);
        Integer numValueOf = Integer.valueOf(ModuleDescriptor.MODULE_VERSION);
        zzn = zza("measurement.upload.max_conversions_per_day", numValueOf, numValueOf, zzbx.zza, false);
        zzo = zza("measurement.upload.max_realtime_events_per_day", 10, 10, zzby.zza, false);
        zzp = zza("measurement.store.max_stored_events_per_app", 100000, 100000, zzbz.zza, false);
        zzq = zza("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a", zzca.zza, false);
        zzr = zza("measurement.sgtm.google_signal.url", "https://app-measurement.com/s/d", "https://app-measurement.com/s/d", zzcb.zza, false);
        zzs = zza("measurement.sgtm.service_upload_apps_list", "", "", zzcc.zza, false);
        zzt = zza("measurement.sgtm.upload.backoff_http_codes", "404,429,503,504", "404,429,503,504", zzcd.zza, false);
        zzu = zza("measurement.sgtm.upload.retry_interval", 600000L, 600000L, zzce.zza, false);
        zzv = zza("measurement.sgtm.upload.retry_max_wait", 21600000L, 21600000L, zzcg.zza, false);
        zzw = zza("measurement.sgtm.batch.retry_interval", 1800000L, 1800000L, zzch.zza, false);
        zzx = zza("measurement.sgtm.batch.retry_max_wait", 21600000L, 21600000L, zzci.zza, false);
        zzy = zza("measurement.sgtm.batch.retry_max_count", 10, 10, zzcj.zza, false);
        zzz = zza("measurement.sgtm.upload.max_queued_batches", 5000, 5000, zzck.zza, false);
        zzA = zza("measurement.sgtm.upload.batches_retrieval_limit", 5, 5, zzcl.zza, false);
        zzB = zza("measurement.sgtm.upload.min_delay_after_startup", 5000L, 5000L, zzcm.zza, false);
        zzC = zza("measurement.sgtm.upload.min_delay_after_broadcast", 1000L, 1000L, zzcn.zza, false);
        zzD = zza("measurement.sgtm.upload.min_delay_after_background", 600000L, 600000L, zzco.zza, false);
        zzE = zza("measurement.sgtm.batch.long_queuing_threshold", 14400000L, 14400000L, zzcp.zza, false);
        zzF = zza("measurement.upload.backoff_period", 43200000L, 43200000L, zzcr.zza, false);
        zzG = zza("measurement.upload.window_interval", lValueOf, lValueOf, zzcs.zza, false);
        zzH = zza("measurement.upload.interval", lValueOf, lValueOf, zzct.zza, false);
        zzI = zza("measurement.upload.realtime_upload_interval", 10000L, 10000L, zzcu.zza, false);
        zzJ = zza("measurement.upload.debug_upload_interval", 1000L, 1000L, zzcv.zza, false);
        zzK = zza("measurement.upload.minimum_delay", 500L, 500L, zzcw.zza, false);
        Long lValueOf2 = Long.valueOf(l8.b.b);
        zzL = zza("measurement.alarm_manager.minimum_interval", lValueOf2, lValueOf2, zzcx.zza, false);
        zzM = zza("measurement.upload.stale_data_deletion_interval", 86400000L, 86400000L, zzcy.zza, false);
        zzN = zza("measurement.upload.refresh_blacklisted_config_interval", 604800000L, 604800000L, zzcz.zza, false);
        zzO = zza("measurement.upload.initial_upload_delay_time", 15000L, 15000L, zzda.zza, false);
        zzP = zza("measurement.upload.retry_time", 1800000L, 1800000L, zzdc.zza, false);
        zzQ = zza("measurement.upload.retry_count", 6, 6, zzdd.zza, false);
        zzR = zza("measurement.upload.max_queue_time", 518400000L, 518400000L, zzde.zza, false);
        zzS = zza("measurement.upload.google_signal_max_queue_time", 300000L, 300000L, zzdf.zza, false);
        zzT = zza("measurement.lifetimevalue.max_currency_tracked", 4, 4, zzdg.zza, false);
        zzU = zza("measurement.audience.filter_result_max_count", 200, 200, zzdh.zza, false);
        zzV = zza("measurement.upload.max_public_user_properties", 100, 100, null, false);
        zzW = zza("measurement.upload.max_event_name_cardinality", 2000, 2000, null, false);
        zzX = zza("measurement.upload.max_public_event_params", 100, 100, null, false);
        zzY = zza("measurement.service_client.idle_disconnect_millis", 5000L, 5000L, zzdi.zza, false);
        zzZ = zza("measurement.service_client.reconnect_millis", 1000L, 1000L, zzdj.zza, false);
        Boolean bool = Boolean.FALSE;
        zzaa = zza("measurement.test.boolean_flag", bool, bool, zzdk.zza, false);
        zzab = zza("measurement.test.string_flag", "---", "---", zzdl.zza, false);
        zzac = zza("measurement.test.long_flag", -1L, -1L, zzdn.zza, false);
        zza("measurement.test.cached_long_flag", -1L, -1L, zzdo.zza, true);
        zzad = zza("measurement.test.int_flag", -2, -2, zzdp.zza, false);
        Double dValueOf = Double.valueOf(-3.0d);
        zzae = zza("measurement.test.double_flag", dValueOf, dValueOf, zzdq.zza, false);
        zzaf = zza("measurement.experiment.max_ids", 50, 50, zzdr.zza, false);
        zzag = zza("measurement.upload.max_item_scoped_custom_parameters", 27, 27, zzds.zza, false);
        zzah = zza("measurement.upload.max_event_parameter_value_length", 500, 500, zzdt.zza, true);
        zzai = zza("measurement.max_bundles_per_iteration", 100, 100, zzdu.zza, false);
        zzaj = zza("measurement.sdk.attribution.cache.ttl", 604800000L, 604800000L, zzdv.zza, false);
        zzak = zza("measurement.redaction.app_instance_id.ttl", 7200000L, 7200000L, zzdw.zza, false);
        zzal = zza("measurement.rb.attribution.client.min_ad_services_version", 7, 7, zzdy.zza, false);
        zzam = zza("measurement.dma_consent.max_daily_dcu_realtime_events", 1, 1, zzdz.zza, false);
        zzan = zza("measurement.rb.attribution.uri_scheme", "https", "https", zzea.zza, false);
        zzao = zza("measurement.rb.attribution.uri_authority", "google-analytics.com", "google-analytics.com", zzeb.zza, false);
        zzap = zza("measurement.rb.attribution.uri_path", "privacy-sandbox/register-app-conversion", "privacy-sandbox/register-app-conversion", zzec.zza, false);
        zzaq = zza("measurement.session.engagement_interval", lValueOf, lValueOf, zzed.zza, false);
        zzar = zza("measurement.rb.attribution.app_allowlist", "", "", zzee.zza, false);
        zzas = zza("measurement.rb.attribution.user_properties", "_npa,npa|_fot,fot", "_npa,npa|_fot,fot", zzef.zza, false);
        zzat = zza("measurement.rb.attribution.event_params", "value|currency", "value|currency", zzeg.zza, false);
        zzau = zza("measurement.rb.attribution.query_parameters_to_remove", "", "", zzeh.zza, false);
        zzav = zza("measurement.rb.attribution.max_queue_time", 864000000L, 864000000L, zzej.zza, false);
        zzaw = zza("measurement.rb.attribution.max_retry_delay_seconds", 16, 16, zzek.zza, false);
        zzax = zza("measurement.rb.attribution.client.min_time_after_boot_seconds", 90, 90, zzel.zza, false);
        zza("measurement.rb.attribution.max_trigger_uris_queried_at_once", 0, 0, zzem.zza, false);
        zzay = zza("measurement.rb.max_trigger_registrations_per_day", 1000, 1000, zzen.zza, false);
        Boolean bool2 = Boolean.TRUE;
        zzaz = zza("measurement.config.bundle_for_all_apps_on_backgrounded", bool2, bool2, zzeo.zza, false);
        zzaA = zza("measurement.config.notify_trigger_uris_on_backgrounded", bool2, bool2, zzep.zza, false);
        Integer numValueOf2 = Integer.valueOf(AuthApiStatusCodes.AUTH_API_INVALID_CREDENTIALS);
        zzaB = zza("measurement.rb.attribution.notify_app_delay_millis", numValueOf2, numValueOf2, zzeq.zza, false);
        zzaC = zza("measurement.quality.checksum", bool, bool, null, false);
        zzaD = zza("measurement.audience.use_bundle_end_timestamp_for_non_sequence_property_filters", bool, bool, zzer.zza, false);
        zzaE = zza("measurement.audience.refresh_event_count_filters_timestamp", bool, bool, zzes.zza, false);
        zzaF = zza("measurement.audience.use_bundle_timestamp_for_event_count_filters", bool, bool, zzeu.zza, true);
        zzaG = zza("measurement.sdk.collection.last_deep_link_referrer_campaign2", bool, bool, zzev.zza, false);
        zzaH = zza("measurement.integration.disable_firebase_instance_id", bool, bool, zzew.zza, false);
        zzaI = zza("measurement.collection.service.update_with_analytics_fix", bool, bool, zzex.zza, false);
        zzaJ = zza("measurement.service.storage_consent_support_version", 203600, 203600, zzey.zza, false);
        zzaK = zza("measurement.service.store_null_safelist", bool2, bool2, zzez.zza, false);
        zzaL = zza("measurement.service.store_safelist", bool2, bool2, zzfa.zza, false);
        zzaM = zza("measurement.session_stitching_token_enabled", bool, bool, zzfb.zza, false);
        zzaN = zza("measurement.sgtm.client.upload_on_backgrounded.dev", bool, bool, zzfc.zza, true);
        zzaO = zza("measurement.gmscore_client_telemetry", bool, bool, zzft.zza, false);
        zzaP = zza("measurement.rb.attribution.service", bool2, bool2, zzfd.zza, true);
        zzaQ = zza("measurement.rb.attribution.client2", bool2, bool2, zzff.zza, true);
        zzaR = zza("measurement.rb.attribution.uuid_generation", bool2, bool2, zzfg.zza, false);
        zzaS = zza("measurement.rb.attribution.enable_trigger_redaction", bool2, bool2, zzfh.zza, false);
        zza("measurement.rb.attribution.followup1.service", bool, bool, zzfi.zza, false);
        zzaT = zza("measurement.rb.attribution.retry_disposition", bool, bool, zzfj.zza, false);
        zzaU = zza("measurement.client.sessions.enable_fix_background_engagement", bool, bool, zzfw.zza, false);
        zzaV = zza("measurement.set_default_event_parameters_propagate_clear.service.dev", bool2, bool2, zzfk.zza, false);
        zzaW = zza("measurement.set_default_event_parameters_propagate_clear.client.dev", bool2, bool2, zzfl.zza, false);
        zzaX = zza("measurement.service.ad_impression.convert_value_to_double", bool2, bool2, zzfm.zza, false);
        zza("measurement.rb.attribution.service.enable_max_trigger_uris_queried_at_once", bool2, bool2, zzfn.zza, false);
        zza("measurement.remove_conflicting_first_party_apis.dev", bool, bool, zzfo.zza, false);
        zzaY = zza("measurement.rb.attribution.service.trigger_uris_high_priority", bool2, bool2, zzbp.zza, false);
        zzaZ = zza("measurement.tcf.consent_fix", bool2, bool2, zzbq.zza, false);
        zzba = zza("measurement.experiment.enable_phenotype_experiment_reporting", bool2, bool2, zzbr.zza, false);
        zzbb = zza("measurement.set_default_event_parameters.fix_service_request_ordering", bool, bool, zzbj.zza, false);
        zzbc = zza("measurement.set_default_event_parameters.fix_app_update_logging", bool2, bool2, zzbi.zza, false);
        zzbd = zza("measurement.service.fix_stop_bundling_bug", bool2, bool2, zzbm.zza, false);
        zzbe = zza("measurement.fix_params_logcat_spam", bool2, bool2, zzbl.zza, false);
        zzbf = zza("measurement.gbraid_campaign.stop_lgclid", bool, bool, zzfs.zza, false);
        zzbg = zza("measurement.gbraid_compaign.compaign_params_triggering_info_update", "gclid,gbraid,gad_campaignid", "gclid,gbraid,gad_campaignid", zzbs.zza, false);
        zzbh = zza("measurement.edpb.service", bool, bool, zzbk.zza, false);
        zzbi = zza("measurement.edpb.events_cached_in_no_data_mode", "_f,_v,_cmp", "_f,_v,_cmp", zzbt.zza, false);
        zzbj = zza("measurement.add_first_launch_logging_timestamp.service", bool, bool, zzfv.zza, false);
        zzbk = zza("measurement.overlapping_bundles_fix", bool, bool, zzbu.zza, false);
    }

    @VisibleForTesting
    public static zzfx zza(String str, Object obj, Object obj2, zzbn zzbnVar, boolean z) {
        zzfx zzfxVar = new zzfx(str, obj, obj2, zzbnVar, null);
        if (z) {
            zzbl.add(zzfxVar);
        }
        return zzfxVar;
    }
}
