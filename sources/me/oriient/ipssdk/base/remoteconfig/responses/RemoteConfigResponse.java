package me.oriient.ipssdk.base.remoteconfig.responses;

import androidx.annotation.Keep;
import com.medallia.digital.mobilesdk.l3;
import com.salesforce.marketingcloud.storage.db.i;
import java.util.List;
import java.util.concurrent.TimeUnit;
import kotlin.Deprecated;
import kotlin.Metadata;
import kotlin.jvm.JvmStatic;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Reflection;
import kotlin.jvm.internal.SourceDebugExtension;
import kotlinx.serialization.KSerializer;
import kotlinx.serialization.Serializable;
import kotlinx.serialization.descriptors.SerialDescriptor;
import kotlinx.serialization.encoding.CompositeEncoder;
import kotlinx.serialization.internal.BooleanSerializer;
import kotlinx.serialization.internal.DoubleSerializer;
import kotlinx.serialization.internal.FloatSerializer;
import kotlinx.serialization.internal.IntSerializer;
import kotlinx.serialization.internal.LongSerializer;
import kotlinx.serialization.internal.SerializationConstructorMarker;
import kotlinx.serialization.internal.StringSerializer;
import me.oriient.internal.infra.utils.core.BuildData;
import me.oriient.internal.services.config.CommonDataRepositoryConfig;
import me.oriient.internal.services.dataManager.obstaclesPolygonsFinder.SnappingConfigResponse;
import me.oriient.internal.services.dataManager.obstaclesPolygonsFinder.SnappingConfigResponse$$serializer;
import me.oriient.internal.services.dataModel.auth.AuthConfig;
import me.oriient.internal.services.dataModel.auth.AuthConfigResponse;
import me.oriient.internal.services.dataModel.auth.AuthConfigResponse$$serializer;
import me.oriient.internal.services.dataModel.engine.EngineConfigResponse;
import me.oriient.internal.services.dataModel.engine.EngineConfigResponse$$serializer;
import me.oriient.internal.services.dataModel.engine.ExtraEngineConfig;
import me.oriient.internal.services.dataModel.engine.MapGridFetchingStrategy;
import me.oriient.internal.services.dataModel.engine.MapGridType;
import me.oriient.internal.services.dataModel.geofence.GeofenceConfig;
import me.oriient.internal.services.dataModel.geofence.GeofenceConfigResponse;
import me.oriient.internal.services.dataModel.geofence.GeofenceConfigResponse$$serializer;
import me.oriient.internal.services.dataModel.navigation.NavigationConfig;
import me.oriient.internal.services.dataModel.navigation.NavigationConfigResponse;
import me.oriient.internal.services.dataModel.navigation.NavigationConfigResponse$$serializer;
import me.oriient.internal.services.dataModel.navigation.turnByTurn.TurnByTurnConfig;
import me.oriient.internal.services.dataModel.navigation.turnByTurn.TurnByTurnConfigResponse;
import me.oriient.internal.services.dataModel.navigation.turnByTurn.TurnByTurnConfigResponse$$serializer;
import me.oriient.internal.services.dataModel.plai.PlaiConfig;
import me.oriient.internal.services.dataModel.plai.PlaiConfigResponse;
import me.oriient.internal.services.dataModel.plai.PlaiConfigResponse$$serializer;
import me.oriient.internal.services.dataModel.positioning.PositioningConfig;
import me.oriient.internal.services.dataModel.positioning.PositioningConfigResponse;
import me.oriient.internal.services.dataModel.positioning.PositioningConfigResponse$$serializer;
import me.oriient.internal.services.dataModel.sensors.SensorManagerConfig;
import me.oriient.internal.services.dataModel.sensors.SensorsConfigResponse;
import me.oriient.internal.services.dataModel.sensors.SensorsConfigResponse$$serializer;
import me.oriient.internal.services.dataModel.sensors.SensorsManagerConfigResponse;
import me.oriient.internal.services.elog.ELog;
import me.oriient.ipssdk.base.di.DependencyInjectionKt;
import me.oriient.ipssdk.base.remoteconfig.AutoCalibConfig;
import me.oriient.ipssdk.base.remoteconfig.CommonConfig;
import me.oriient.ipssdk.base.remoteconfig.ELogConfig;
import me.oriient.ipssdk.base.remoteconfig.MiscCommonConfig;
import me.oriient.ipssdk.base.remoteconfig.MiscRealtimeConfig;
import me.oriient.ipssdk.base.remoteconfig.ProximityConfig;
import me.oriient.ipssdk.base.remoteconfig.RealTimeConfig;
import me.oriient.ipssdk.base.remoteconfig.RemoteConfig;
import me.oriient.ipssdk.base.remoteconfig.RestConfig;
import me.oriient.ipssdk.base.remoteconfig.SnappingConfig;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Keep
@Metadata(d1 = {"\u0000£\u0001\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0010\u000e\n\u0002\b\t\n\u0002\u0010\u0006\n\u0002\b\u0005\n\u0002\u0010\u0007\n\u0002\b.\n\u0002\u0010\t\n\u0002\b\u000f\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0003\bÓ\u0001\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\b\u0081\b\u0018\u0000 Ò\u00022\u00020\u0001:\u0004Ñ\u0002Ò\u0002BË\u0007\b\u0011\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0006\u0010\u0005\u001a\u00020\u0003\u0012\b\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010\b\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\t\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\n\u001a\u0004\u0018\u00010\u000b\u0012\b\u0010\f\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\r\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u000e\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u000f\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u0010\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u0011\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u0012\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u0013\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u0014\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010\u0016\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010\u0018\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010\u0019\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010\u001a\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010\u001c\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010\u001d\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010\u001e\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010\u001f\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010 \u001a\u0004\u0018\u00010\u0007\u0012\b\u0010!\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010\"\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010#\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010$\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010%\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010&\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010'\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010(\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010)\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010*\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010+\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010,\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010-\u001a\u0004\u0018\u00010\u001b\u0012\b\u0010.\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010/\u001a\u0004\u0018\u00010\u0003\u0012\b\u00100\u001a\u0004\u0018\u00010\u0003\u0012\b\u00101\u001a\u0004\u0018\u00010\u0003\u0012\b\u00102\u001a\u0004\u0018\u00010\u0015\u0012\b\u00103\u001a\u0004\u0018\u00010\u0007\u0012\b\u00104\u001a\u0004\u0018\u00010\u0015\u0012\b\u00105\u001a\u0004\u0018\u00010\u0003\u0012\b\u00106\u001a\u0004\u0018\u00010\u0015\u0012\b\u00107\u001a\u0004\u0018\u00010\u0003\u0012\b\u00108\u001a\u0004\u0018\u00010\u0003\u0012\b\u00109\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010:\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010;\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010<\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010=\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010>\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010?\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010@\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010A\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010B\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010C\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010D\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010E\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010F\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010G\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010H\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010I\u001a\u0004\u0018\u00010J\u0012\b\u0010K\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010L\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010M\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010N\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010O\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010P\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010Q\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010R\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010S\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010T\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010U\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010V\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010W\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010X\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010Y\u001a\u0004\u0018\u00010Z\u0012\b\u0010[\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010\\\u001a\u0004\u0018\u00010]\u0012\b\u0010^\u001a\u0004\u0018\u00010\u000b\u0012\b\u0010_\u001a\u0004\u0018\u00010\u000b\u0012\b\u0010`\u001a\u0004\u0018\u00010\u0015\u0012\b\u0010a\u001a\u0004\u0018\u00010b\u0012\b\u0010c\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010d\u001a\u0004\u0018\u00010e\u0012\b\u0010f\u001a\u0004\u0018\u00010g\u0012\b\u0010h\u001a\u0004\u0018\u00010i\u0012\b\u0010j\u001a\u0004\u0018\u00010k\u0012\b\u0010l\u001a\u0004\u0018\u00010m\u0012\b\u0010n\u001a\u0004\u0018\u00010o\u0012\b\u0010p\u001a\u0004\u0018\u00010q\u0012\b\u0010r\u001a\u0004\u0018\u00010s¢\u0006\u0002\u0010tBá\b\u0012\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010\b\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\t\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\n\u001a\u0004\u0018\u00010\u000b\u0012\n\b\u0002\u0010\f\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\r\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\u000e\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\u000f\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\u0010\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\u0011\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\u0012\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\u0013\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010\u0014\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010\u0016\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010\u0017\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010\u0018\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010\u0019\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010\u001a\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010\u001c\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010\u001d\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010\u001e\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010\u001f\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010 \u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010!\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010\"\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010#\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010$\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010%\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010&\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010'\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010(\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010)\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010*\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010+\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010,\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010-\u001a\u0004\u0018\u00010\u001b\u0012\n\b\u0002\u0010.\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010/\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u00100\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u00101\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u00102\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u00103\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u00104\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u00105\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u00106\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u00107\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u00108\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u00109\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010:\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010;\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010<\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010=\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010>\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010?\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010@\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010A\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010B\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010C\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010D\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010E\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010F\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010G\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010H\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010I\u001a\u0004\u0018\u00010J\u0012\n\b\u0002\u0010K\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010L\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010M\u001a\u0004\u0018\u00010\u0003\u0012\n\b\u0002\u0010N\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010O\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010P\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010Q\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010R\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010S\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010T\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010U\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010V\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010W\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010X\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010Y\u001a\u0004\u0018\u00010Z\u0012\n\b\u0002\u0010[\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010\\\u001a\u0004\u0018\u00010]\u0012\n\b\u0002\u0010^\u001a\u0004\u0018\u00010\u000b\u0012\n\b\u0002\u0010_\u001a\u0004\u0018\u00010\u000b\u0012\n\b\u0002\u0010`\u001a\u0004\u0018\u00010\u0015\u0012\n\b\u0002\u0010a\u001a\u0004\u0018\u00010b\u0012\n\b\u0002\u0010c\u001a\u0004\u0018\u00010\u0007\u0012\n\b\u0002\u0010d\u001a\u0004\u0018\u00010e\u0012\n\b\u0002\u0010f\u001a\u0004\u0018\u00010g\u0012\n\b\u0002\u0010h\u001a\u0004\u0018\u00010i\u0012\n\b\u0002\u0010j\u001a\u0004\u0018\u00010k\u0012\n\b\u0002\u0010l\u001a\u0004\u0018\u00010m\u0012\n\b\u0002\u0010n\u001a\u0004\u0018\u00010o\u0012\n\b\u0002\u0010p\u001a\u0004\u0018\u00010q¢\u0006\u0002\u0010uJ\u0011\u0010ä\u0001\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0012\u0010å\u0001\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010æ\u0001\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010ç\u0001\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010è\u0001\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010é\u0001\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010ê\u0001\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010ë\u0001\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010ì\u0001\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0012\u0010í\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0012\u0010î\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0012\u0010ï\u0001\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010ð\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0012\u0010ñ\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0011\u0010ò\u0001\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010ó\u0001\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0012\u0010ô\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0012\u0010õ\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0012\u0010ö\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0012\u0010÷\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0012\u0010ø\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0011\u0010ù\u0001\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0012\u0010ú\u0001\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010û\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0012\u0010ü\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0012\u0010ý\u0001\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010þ\u0001\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0011\u0010ÿ\u0001\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0012\u0010\u0080\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010\u0081\u0002\u001a\u0004\u0018\u00010\u001bHÆ\u0003¢\u0006\u0003\u0010\u0084\u0001J\u0012\u0010\u0082\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010\u0083\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010\u0084\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\f\u0010\u0085\u0002\u001a\u0004\u0018\u00010\u000bHÆ\u0003J\u0012\u0010\u0086\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010\u0087\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010\u0088\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010\u0089\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0012\u0010\u008a\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010\u008b\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0012\u0010\u008c\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010\u008d\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010\u008e\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010\u008f\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0012\u0010\u0090\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010\u0091\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010\u0092\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0012\u0010\u0093\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010\u0094\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0012\u0010\u0095\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010\u0096\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010\u0097\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010\u0098\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010\u0099\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010\u009a\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0012\u0010\u009b\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010\u009c\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0012\u0010\u009d\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010\u009e\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010\u009f\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010 \u0002\u001a\u0004\u0018\u00010JHÆ\u0003¢\u0006\u0002\u0010~J\u0011\u0010¡\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010¢\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0012\u0010£\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010¤\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010¥\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0012\u0010¦\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010§\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010¨\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010©\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\u0011\u0010ª\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010«\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010¬\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010\u00ad\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010®\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\u0011\u0010¯\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\f\u0010°\u0002\u001a\u0004\u0018\u00010ZHÆ\u0003J\u0012\u0010±\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\u0011\u0010²\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\f\u0010³\u0002\u001a\u0004\u0018\u00010]HÆ\u0003J\f\u0010´\u0002\u001a\u0004\u0018\u00010\u000bHÆ\u0003J\f\u0010µ\u0002\u001a\u0004\u0018\u00010\u000bHÆ\u0003J\u0011\u0010¶\u0002\u001a\u0004\u0018\u00010\u0015HÆ\u0003¢\u0006\u0002\u0010wJ\f\u0010·\u0002\u001a\u0004\u0018\u00010bHÆ\u0003J\u0011\u0010¸\u0002\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010zJ\f\u0010¹\u0002\u001a\u0004\u0018\u00010eHÆ\u0003J\f\u0010º\u0002\u001a\u0004\u0018\u00010gHÆ\u0003J\f\u0010»\u0002\u001a\u0004\u0018\u00010iHÆ\u0003J\u0012\u0010¼\u0002\u001a\u0004\u0018\u00010\u0003HÆ\u0003¢\u0006\u0003\u0010\u0087\u0001J\f\u0010½\u0002\u001a\u0004\u0018\u00010kHÆ\u0003J\f\u0010¾\u0002\u001a\u0004\u0018\u00010mHÆ\u0003J\f\u0010¿\u0002\u001a\u0004\u0018\u00010oHÆ\u0003J\f\u0010À\u0002\u001a\u0004\u0018\u00010qHÆ\u0003Jì\b\u0010Á\u0002\u001a\u00020\u00002\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010\b\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\t\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\n\u001a\u0004\u0018\u00010\u000b2\n\b\u0002\u0010\f\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\r\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u000e\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u000f\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0010\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0011\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0012\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0013\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0014\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010\u0016\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010\u0017\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010\u0018\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010\u0019\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010\u001a\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010\u001c\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010\u001d\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010\u001e\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010\u001f\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010 \u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010!\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010\"\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010#\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010$\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010%\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010&\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010'\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010(\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010)\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010*\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010+\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010,\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010-\u001a\u0004\u0018\u00010\u001b2\n\b\u0002\u0010.\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010/\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u00100\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u00101\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u00102\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u00103\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u00104\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u00105\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u00106\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u00107\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u00108\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u00109\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010:\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010;\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010<\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010=\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010>\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010?\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010@\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010A\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010B\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010C\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010D\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010E\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010F\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010G\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010H\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010I\u001a\u0004\u0018\u00010J2\n\b\u0002\u0010K\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010L\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010M\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010N\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010O\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010P\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010Q\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010R\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010S\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010T\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010U\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010V\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010W\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010X\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010Y\u001a\u0004\u0018\u00010Z2\n\b\u0002\u0010[\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010\\\u001a\u0004\u0018\u00010]2\n\b\u0002\u0010^\u001a\u0004\u0018\u00010\u000b2\n\b\u0002\u0010_\u001a\u0004\u0018\u00010\u000b2\n\b\u0002\u0010`\u001a\u0004\u0018\u00010\u00152\n\b\u0002\u0010a\u001a\u0004\u0018\u00010b2\n\b\u0002\u0010c\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010d\u001a\u0004\u0018\u00010e2\n\b\u0002\u0010f\u001a\u0004\u0018\u00010g2\n\b\u0002\u0010h\u001a\u0004\u0018\u00010i2\n\b\u0002\u0010j\u001a\u0004\u0018\u00010k2\n\b\u0002\u0010l\u001a\u0004\u0018\u00010m2\n\b\u0002\u0010n\u001a\u0004\u0018\u00010o2\n\b\u0002\u0010p\u001a\u0004\u0018\u00010qHÆ\u0001¢\u0006\u0003\u0010Â\u0002J\u0015\u0010Ã\u0002\u001a\u00020\u00072\t\u0010Ä\u0002\u001a\u0004\u0018\u00010\u0001HÖ\u0003J\n\u0010Å\u0002\u001a\u00020\u0003HÖ\u0001J\b\u0010Æ\u0002\u001a\u00030Ç\u0002J\n\u0010È\u0002\u001a\u00020\u000bHÖ\u0001J.\u0010É\u0002\u001a\u00030Ê\u00022\u0007\u0010Ë\u0002\u001a\u00020\u00002\b\u0010Ì\u0002\u001a\u00030Í\u00022\b\u0010Î\u0002\u001a\u00030Ï\u0002HÁ\u0001¢\u0006\u0003\bÐ\u0002R\u0015\u0010D\u001a\u0004\u0018\u00010\u0015¢\u0006\n\n\u0002\u0010x\u001a\u0004\bv\u0010wR\u0015\u0010:\u001a\u0004\u0018\u00010\u0007¢\u0006\n\n\u0002\u0010{\u001a\u0004\by\u0010zR\u0015\u0010+\u001a\u0004\u0018\u00010\u0007¢\u0006\n\n\u0002\u0010{\u001a\u0004\b|\u0010zR\u0015\u0010I\u001a\u0004\u0018\u00010J¢\u0006\n\n\u0002\u0010\u007f\u001a\u0004\b}\u0010~R\u0015\u0010d\u001a\u0004\u0018\u00010e¢\u0006\n\n\u0000\u001a\u0006\b\u0080\u0001\u0010\u0081\u0001R\u0016\u0010C\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b\u0082\u0001\u0010wR\u0018\u0010\u001c\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\b\u0083\u0001\u0010\u0084\u0001R\u0018\u00107\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b\u0086\u0001\u0010\u0087\u0001R\u0016\u00106\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b\u0089\u0001\u0010wR\u0016\u0010\u0017\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\b\u008a\u0001\u0010zR\u0016\u0010H\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b\u008b\u0001\u0010wR\u0018\u0010.\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b\u008c\u0001\u0010\u0087\u0001R\u0018\u0010\u001d\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\b\u008d\u0001\u0010\u0084\u0001R\u0016\u0010A\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b\u008e\u0001\u0010wR\u0016\u0010<\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b\u008f\u0001\u0010wR\u0016\u0010;\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b\u0090\u0001\u0010wR\u0018\u0010\f\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b\u0091\u0001\u0010\u0087\u0001R\u0018\u0010\r\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b\u0092\u0001\u0010\u0087\u0001R\u0018\u0010\b\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b\u0093\u0001\u0010\u0087\u0001R\u0018\u0010\u0012\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b\u0094\u0001\u0010\u0087\u0001R\u0018\u0010\u0013\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b\u0095\u0001\u0010\u0087\u0001R\u0015\u0010\n\u001a\u0004\u0018\u00010\u000b¢\u0006\n\n\u0000\u001a\u0006\b\u0096\u0001\u0010\u0097\u0001R\u0016\u0010G\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\b\u0098\u0001\u0010zR\u0016\u0010\u0018\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\b\u0099\u0001\u0010zR\u0015\u0010\\\u001a\u0004\u0018\u00010]¢\u0006\n\n\u0000\u001a\u0006\b\u009a\u0001\u0010\u009b\u0001R\u0018\u00105\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b\u009c\u0001\u0010\u0087\u0001R\u0016\u00104\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b\u009d\u0001\u0010wR\u0016\u0010@\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\b\u009e\u0001\u0010zR\u0018\u0010=\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b\u009f\u0001\u0010\u0087\u0001R\u0018\u0010?\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b \u0001\u0010\u0087\u0001R\u0016\u0010>\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b¡\u0001\u0010wR\u0016\u0010\u0014\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b¢\u0001\u0010wR\u0016\u0010P\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b£\u0001\u0010wR\u0016\u0010Q\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b¤\u0001\u0010wR\u0016\u0010R\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b¥\u0001\u0010wR\u0016\u0010O\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b¦\u0001\u0010wR\u0016\u0010N\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b§\u0001\u0010wR\u0018\u0010\u0011\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b¨\u0001\u0010\u0087\u0001R\u0015\u0010f\u001a\u0004\u0018\u00010g¢\u0006\n\n\u0000\u001a\u0006\b©\u0001\u0010ª\u0001R\u0018\u00101\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b«\u0001\u0010\u0087\u0001R\u0018\u0010/\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b¬\u0001\u0010\u0087\u0001R\u0015\u0010B\u001a\u0004\u0018\u00010\u0007¢\u0006\n\n\u0002\u0010{\u001a\u0004\bB\u0010zR\u0015\u0010c\u001a\u0004\u0018\u00010\u0007¢\u0006\n\n\u0002\u0010{\u001a\u0004\bc\u0010zR\u0015\u00103\u001a\u0004\u0018\u00010\u0007¢\u0006\n\n\u0002\u0010{\u001a\u0004\b3\u0010zR\u0015\u0010K\u001a\u0004\u0018\u00010\u0007¢\u0006\n\n\u0002\u0010{\u001a\u0004\bK\u0010zR\u0016\u00102\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b\u00ad\u0001\u0010wR\u0015\u0010^\u001a\u0004\u0018\u00010\u000b¢\u0006\n\n\u0000\u001a\u0006\b®\u0001\u0010\u0097\u0001R\u0015\u0010_\u001a\u0004\u0018\u00010\u000b¢\u0006\n\n\u0000\u001a\u0006\b¯\u0001\u0010\u0097\u0001R\u0016\u0010`\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b°\u0001\u0010wR\u0018\u00100\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b±\u0001\u0010\u0087\u0001R\u0018\u0010E\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b²\u0001\u0010\u0087\u0001R\u0018\u0010F\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b³\u0001\u0010\u0087\u0001R\u0018\u0010\u0010\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\b´\u0001\u0010\u0087\u0001R\u0018\u0010\t\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\bµ\u0001\u0010\u0087\u0001R\u0018\u0010\u001a\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\b¶\u0001\u0010\u0084\u0001R\u0016\u0010T\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\b·\u0001\u0010zR\u0015\u0010a\u001a\u0004\u0018\u00010b¢\u0006\n\n\u0000\u001a\u0006\b¸\u0001\u0010¹\u0001R\u0018\u0010\u001e\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\bº\u0001\u0010\u0084\u0001R\u0016\u0010\u0019\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\b»\u0001\u0010wR\u0015\u0010p\u001a\u0004\u0018\u00010q¢\u0006\n\n\u0000\u001a\u0006\b¼\u0001\u0010½\u0001R\u0015\u0010h\u001a\u0004\u0018\u00010i¢\u0006\n\n\u0000\u001a\u0006\b¾\u0001\u0010¿\u0001R\u0015\u0010l\u001a\u0004\u0018\u00010m¢\u0006\n\n\u0000\u001a\u0006\bÀ\u0001\u0010Á\u0001R\u0018\u0010*\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\bÂ\u0001\u0010\u0084\u0001R\u0018\u0010)\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\bÃ\u0001\u0010\u0087\u0001R\u0016\u0010\u001f\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\bÄ\u0001\u0010zR\u0018\u0010\u000f\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\bÅ\u0001\u0010\u0087\u0001R\u0018\u0010\u000e\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\bÆ\u0001\u0010\u0087\u0001R\u0018\u0010(\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\bÇ\u0001\u0010\u0084\u0001R\u0016\u0010X\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\bÈ\u0001\u0010wR\u0016\u0010L\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\bÉ\u0001\u0010wR\u0015\u0010Y\u001a\u0004\u0018\u00010Z¢\u0006\n\n\u0000\u001a\u0006\bÊ\u0001\u0010Ë\u0001R\u0018\u0010M\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\bÌ\u0001\u0010\u0087\u0001R\u0016\u0010[\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\bÍ\u0001\u0010zR\u0016\u0010\u0006\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\bÎ\u0001\u0010zR\u0016\u0010 \u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\bÏ\u0001\u0010zR\u0015\u0010n\u001a\u0004\u0018\u00010o¢\u0006\n\n\u0000\u001a\u0006\bÐ\u0001\u0010Ñ\u0001R\u0018\u0010,\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\bÒ\u0001\u0010\u0087\u0001R\u0018\u0010-\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\bÓ\u0001\u0010\u0084\u0001R\u0018\u00108\u001a\u0004\u0018\u00010\u0003¢\u0006\r\n\u0003\u0010\u0088\u0001\u001a\u0006\bÔ\u0001\u0010\u0087\u0001R\u0016\u00109\u001a\u0004\u0018\u00010\u0015¢\u0006\u000b\n\u0002\u0010x\u001a\u0005\bÕ\u0001\u0010wR\u0016\u0010W\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\bÖ\u0001\u0010zR\u0016\u0010V\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\b×\u0001\u0010zR\u0018\u0010\"\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\bØ\u0001\u0010\u0084\u0001R\u0016\u0010&\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\bÙ\u0001\u0010zR\u0018\u0010$\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\bÚ\u0001\u0010\u0084\u0001R\u0018\u0010'\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\bÛ\u0001\u0010\u0084\u0001R\u0018\u0010%\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\bÜ\u0001\u0010\u0084\u0001R\u0018\u0010#\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\bÝ\u0001\u0010\u0084\u0001R\u0018\u0010!\u001a\u0004\u0018\u00010\u001b¢\u0006\r\n\u0003\u0010\u0085\u0001\u001a\u0006\bÞ\u0001\u0010\u0084\u0001R\u0015\u0010j\u001a\u0004\u0018\u00010k¢\u0006\n\n\u0000\u001a\u0006\bß\u0001\u0010à\u0001R\u0016\u0010\u0016\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\bá\u0001\u0010zR\u0016\u0010S\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\bâ\u0001\u0010zR\u0016\u0010U\u001a\u0004\u0018\u00010\u0007¢\u0006\u000b\n\u0002\u0010{\u001a\u0005\bã\u0001\u0010z¨\u0006Ó\u0002"}, d2 = {"Lme/oriient/ipssdk/base/remoteconfig/responses/RemoteConfigResponse;", "", "seen1", "", "seen2", "seen3", "shouldUseElog", "", "elogLevel", "metricsLevel", "elogUrl", "", "eLogQueueSize", "eLogReportAttemptsLimit", "restReadTimeoutSec", "restConnectTimeoutSec", "maxSessionLengthMin", "geoAcceptedAccuracyMeters", "elogLevelSendingBatchSize", "elogLevelSendingIntervalSeconds", "foregroundServiceMonitoringIntervalSec", "", "useFusedLocationProvider", "considerGeofenceAlwaysInside", "enablePeriodicCacheRefreshing", "periodicCacheRefreshingTimeHours", "minDistanceToRecalculateNavRouteMeters", "", "calibrationNeededCheckIntervalMinutes", "defaultBuildingsFetchRadius", "nearbyBuildingsSearchRadiusMeters", "requiredCalibrationOnFailedCheck", "shouldUseTailTrimming", "tailTrimming_maxPositionJumpMeters", "tailTrimming_AcceptableDistanceToRouteSegmentMeters", "tailTrimming_RouteSegmentLengthMeters", "tailTrimming_DistanceShrinkingRation", "tailTrimming_RouteRecalculationDistanceMeters", "tailTrimming_AllowFirstWaypointTrimming", "tailTrimming_FirstWaypointTrimmingMaxDistance", "secondsToIndicateLimitedConnection", "recoveryAttemptsLimit", "recoveryAttemptIntervalSec", "allowNoBarometerPositioningInMultifloor", "startPositioningRetryCount", "startPositioningRetryIntervalSec", "dataLoadingRetryRequestCount", "inMemoryStorageLimit", "maxConcurrentDownloadTasks", "inMemoryStorageCleanUpLimit", "mapDataExpirationTimeMinutes", "isMapImagesPreloadingEnabled", "engineSessionFetchRetryInterval", "engineSessionFetchRetryCount", "configFetchRetryInterval", "configFetchRetryCount", "startReportingRetryCount", "startReportingRetryInterval", "allowClearAllCaches", "dontClearUploadManagerCacheLastDays", "dontClearAllELogsLastMinutes", "eventTagsMaxRetryCount", "eventTagsRetryIntervalSeconds", "eventTagsMaxTagsPerRetry", "eventTagsCachingEnabled", "deviceDataFetchTimeoutSeconds", "isAutoCalibCheckPeriodicallyEnable", "autoCalibCheckTimeIntervalSec", "additionalPercentageToEnterGeofence", "maxLiveNavigationRetryAttempts", "maxProximityDataRetryAttempts", "enableAutomaticPositioningDataPreloading", "dataExpirationTimeDays", "appSessionMaxInactivitySec", "", "isSilentModeEnabled", "sensorSamplingRateHz", "sensorsDataBufferSize", "freezeSensorsDataRelevanceLimitSec", "freezeSensorsDataRelevanceLimitPressureSec", "freezeMonitoringIntervalSec", "freezeRecoveryWaitingDurationSec", "freezeRestartWaitingDurationSec", "useNewSensorManager", "monitorFreezes", "validateSamples", "stopSessionOnSensorError", "stopSessionIfSensorDataOutdated", "sensorIssuesELogIntervalSec", "sensorsConfig", "Lme/oriient/internal/services/dataModel/sensors/SensorsConfigResponse;", "shouldNeverStopPressure", "engine", "Lme/oriient/internal/services/dataModel/engine/EngineConfigResponse;", "mapGridFetchingStrategy", "mapGridType", "mapGridUrlExpirationTimeMinutes", "navigationEngine", "Lme/oriient/internal/services/dataModel/navigation/NavigationConfigResponse;", "isDebugDataManagerEnabled", "auth", "Lme/oriient/internal/services/dataModel/auth/AuthConfigResponse;", "geofence", "Lme/oriient/internal/services/dataModel/geofence/GeofenceConfigResponse;", "positioning", "Lme/oriient/internal/services/dataModel/positioning/PositioningConfigResponse;", "turnByTurn", "Lme/oriient/internal/services/dataModel/navigation/turnByTurn/TurnByTurnConfigResponse;", i.a.x, "Lme/oriient/ipssdk/base/remoteconfig/responses/ProximityConfigResponse;", "snapping", "Lme/oriient/internal/services/dataManager/obstaclesPolygonsFinder/SnappingConfigResponse;", "plai", "Lme/oriient/internal/services/dataModel/plai/PlaiConfigResponse;", "serializationConstructorMarker", "Lkotlinx/serialization/internal/SerializationConstructorMarker;", "(IIILjava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Boolean;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Integer;Ljava/lang/Float;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Float;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Long;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Double;Lme/oriient/internal/services/dataModel/sensors/SensorsConfigResponse;Ljava/lang/Boolean;Lme/oriient/internal/services/dataModel/engine/EngineConfigResponse;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Double;Lme/oriient/internal/services/dataModel/navigation/NavigationConfigResponse;Ljava/lang/Boolean;Lme/oriient/internal/services/dataModel/auth/AuthConfigResponse;Lme/oriient/internal/services/dataModel/geofence/GeofenceConfigResponse;Lme/oriient/internal/services/dataModel/positioning/PositioningConfigResponse;Lme/oriient/internal/services/dataModel/navigation/turnByTurn/TurnByTurnConfigResponse;Lme/oriient/ipssdk/base/remoteconfig/responses/ProximityConfigResponse;Lme/oriient/internal/services/dataManager/obstaclesPolygonsFinder/SnappingConfigResponse;Lme/oriient/internal/services/dataModel/plai/PlaiConfigResponse;Lkotlinx/serialization/internal/SerializationConstructorMarker;)V", "(Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Boolean;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Integer;Ljava/lang/Float;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Float;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Long;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Double;Lme/oriient/internal/services/dataModel/sensors/SensorsConfigResponse;Ljava/lang/Boolean;Lme/oriient/internal/services/dataModel/engine/EngineConfigResponse;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Double;Lme/oriient/internal/services/dataModel/navigation/NavigationConfigResponse;Ljava/lang/Boolean;Lme/oriient/internal/services/dataModel/auth/AuthConfigResponse;Lme/oriient/internal/services/dataModel/geofence/GeofenceConfigResponse;Lme/oriient/internal/services/dataModel/positioning/PositioningConfigResponse;Lme/oriient/internal/services/dataModel/navigation/turnByTurn/TurnByTurnConfigResponse;Lme/oriient/ipssdk/base/remoteconfig/responses/ProximityConfigResponse;Lme/oriient/internal/services/dataManager/obstaclesPolygonsFinder/SnappingConfigResponse;Lme/oriient/internal/services/dataModel/plai/PlaiConfigResponse;)V", "getAdditionalPercentageToEnterGeofence", "()Ljava/lang/Double;", "Ljava/lang/Double;", "getAllowClearAllCaches", "()Ljava/lang/Boolean;", "Ljava/lang/Boolean;", "getAllowNoBarometerPositioningInMultifloor", "getAppSessionMaxInactivitySec", "()Ljava/lang/Long;", "Ljava/lang/Long;", "getAuth", "()Lme/oriient/internal/services/dataModel/auth/AuthConfigResponse;", "getAutoCalibCheckTimeIntervalSec", "getCalibrationNeededCheckIntervalMinutes", "()Ljava/lang/Float;", "Ljava/lang/Float;", "getConfigFetchRetryCount", "()Ljava/lang/Integer;", "Ljava/lang/Integer;", "getConfigFetchRetryInterval", "getConsiderGeofenceAlwaysInside", "getDataExpirationTimeDays", "getDataLoadingRetryRequestCount", "getDefaultBuildingsFetchRadius", "getDeviceDataFetchTimeoutSeconds", "getDontClearAllELogsLastMinutes", "getDontClearUploadManagerCacheLastDays", "getELogQueueSize", "getELogReportAttemptsLimit", "getElogLevel", "getElogLevelSendingBatchSize", "getElogLevelSendingIntervalSeconds", "getElogUrl", "()Ljava/lang/String;", "getEnableAutomaticPositioningDataPreloading", "getEnablePeriodicCacheRefreshing", "getEngine", "()Lme/oriient/internal/services/dataModel/engine/EngineConfigResponse;", "getEngineSessionFetchRetryCount", "getEngineSessionFetchRetryInterval", "getEventTagsCachingEnabled", "getEventTagsMaxRetryCount", "getEventTagsMaxTagsPerRetry", "getEventTagsRetryIntervalSeconds", "getForegroundServiceMonitoringIntervalSec", "getFreezeMonitoringIntervalSec", "getFreezeRecoveryWaitingDurationSec", "getFreezeRestartWaitingDurationSec", "getFreezeSensorsDataRelevanceLimitPressureSec", "getFreezeSensorsDataRelevanceLimitSec", "getGeoAcceptedAccuracyMeters", "getGeofence", "()Lme/oriient/internal/services/dataModel/geofence/GeofenceConfigResponse;", "getInMemoryStorageCleanUpLimit", "getInMemoryStorageLimit", "getMapDataExpirationTimeMinutes", "getMapGridFetchingStrategy", "getMapGridType", "getMapGridUrlExpirationTimeMinutes", "getMaxConcurrentDownloadTasks", "getMaxLiveNavigationRetryAttempts", "getMaxProximityDataRetryAttempts", "getMaxSessionLengthMin", "getMetricsLevel", "getMinDistanceToRecalculateNavRouteMeters", "getMonitorFreezes", "getNavigationEngine", "()Lme/oriient/internal/services/dataModel/navigation/NavigationConfigResponse;", "getNearbyBuildingsSearchRadiusMeters", "getPeriodicCacheRefreshingTimeHours", "getPlai", "()Lme/oriient/internal/services/dataModel/plai/PlaiConfigResponse;", "getPositioning", "()Lme/oriient/internal/services/dataModel/positioning/PositioningConfigResponse;", "getProximity", "()Lme/oriient/ipssdk/base/remoteconfig/responses/ProximityConfigResponse;", "getRecoveryAttemptIntervalSec", "getRecoveryAttemptsLimit", "getRequiredCalibrationOnFailedCheck", "getRestConnectTimeoutSec", "getRestReadTimeoutSec", "getSecondsToIndicateLimitedConnection", "getSensorIssuesELogIntervalSec", "getSensorSamplingRateHz", "getSensorsConfig", "()Lme/oriient/internal/services/dataModel/sensors/SensorsConfigResponse;", "getSensorsDataBufferSize", "getShouldNeverStopPressure", "getShouldUseElog", "getShouldUseTailTrimming", "getSnapping", "()Lme/oriient/internal/services/dataManager/obstaclesPolygonsFinder/SnappingConfigResponse;", "getStartPositioningRetryCount", "getStartPositioningRetryIntervalSec", "getStartReportingRetryCount", "getStartReportingRetryInterval", "getStopSessionIfSensorDataOutdated", "getStopSessionOnSensorError", "getTailTrimming_AcceptableDistanceToRouteSegmentMeters", "getTailTrimming_AllowFirstWaypointTrimming", "getTailTrimming_DistanceShrinkingRation", "getTailTrimming_FirstWaypointTrimmingMaxDistance", "getTailTrimming_RouteRecalculationDistanceMeters", "getTailTrimming_RouteSegmentLengthMeters", "getTailTrimming_maxPositionJumpMeters", "getTurnByTurn", "()Lme/oriient/internal/services/dataModel/navigation/turnByTurn/TurnByTurnConfigResponse;", "getUseFusedLocationProvider", "getUseNewSensorManager", "getValidateSamples", "component1", "component10", "component11", "component12", "component13", "component14", "component15", "component16", "component17", "component18", "component19", "component2", "component20", "component21", "component22", "component23", "component24", "component25", "component26", "component27", "component28", "component29", "component3", "component30", "component31", "component32", "component33", "component34", "component35", "component36", "component37", "component38", "component39", "component4", "component40", "component41", "component42", "component43", "component44", "component45", "component46", "component47", "component48", "component49", "component5", "component50", "component51", "component52", "component53", "component54", "component55", "component56", "component57", "component58", "component59", "component6", "component60", "component61", "component62", "component63", "component64", "component65", "component66", "component67", "component68", "component69", "component7", "component70", "component71", "component72", "component73", "component74", "component75", "component76", "component77", "component78", "component79", "component8", "component80", "component81", "component82", "component83", "component84", "component85", "component86", "component87", "component88", "component89", "component9", "component90", "component91", "component92", "component93", "copy", "(Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Boolean;Ljava/lang/Float;Ljava/lang/Float;Ljava/lang/Integer;Ljava/lang/Float;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Float;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Long;Ljava/lang/Boolean;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Double;Lme/oriient/internal/services/dataModel/sensors/SensorsConfigResponse;Ljava/lang/Boolean;Lme/oriient/internal/services/dataModel/engine/EngineConfigResponse;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Double;Lme/oriient/internal/services/dataModel/navigation/NavigationConfigResponse;Ljava/lang/Boolean;Lme/oriient/internal/services/dataModel/auth/AuthConfigResponse;Lme/oriient/internal/services/dataModel/geofence/GeofenceConfigResponse;Lme/oriient/internal/services/dataModel/positioning/PositioningConfigResponse;Lme/oriient/internal/services/dataModel/navigation/turnByTurn/TurnByTurnConfigResponse;Lme/oriient/ipssdk/base/remoteconfig/responses/ProximityConfigResponse;Lme/oriient/internal/services/dataManager/obstaclesPolygonsFinder/SnappingConfigResponse;Lme/oriient/internal/services/dataModel/plai/PlaiConfigResponse;)Lme/oriient/ipssdk/base/remoteconfig/responses/RemoteConfigResponse;", "equals", "other", "hashCode", "toRemoteConfig", "Lme/oriient/ipssdk/base/remoteconfig/RemoteConfig;", "toString", "write$Self", "", "self", "output", "Lkotlinx/serialization/encoding/CompositeEncoder;", "serialDesc", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "write$Self$me_oriient_sdk_base", "$serializer", "Companion", "me.oriient.sdk-base"}, k = 1, mv = {1, 9, 0}, xi = 48)
@Serializable
@SourceDebugExtension
/* loaded from: classes2.dex */
public final /* data */ class RemoteConfigResponse {

    /* renamed from: Companion, reason: from kotlin metadata */
    @NotNull
    public static final Companion INSTANCE = new Companion(null);

    @Nullable
    private final Double additionalPercentageToEnterGeofence;

    @Nullable
    private final Boolean allowClearAllCaches;

    @Nullable
    private final Boolean allowNoBarometerPositioningInMultifloor;

    @Nullable
    private final Long appSessionMaxInactivitySec;

    @Nullable
    private final AuthConfigResponse auth;

    @Nullable
    private final Double autoCalibCheckTimeIntervalSec;

    @Nullable
    private final Float calibrationNeededCheckIntervalMinutes;

    @Nullable
    private final Integer configFetchRetryCount;

    @Nullable
    private final Double configFetchRetryInterval;

    @Nullable
    private final Boolean considerGeofenceAlwaysInside;

    @Nullable
    private final Double dataExpirationTimeDays;

    @Nullable
    private final Integer dataLoadingRetryRequestCount;

    @Nullable
    private final Float defaultBuildingsFetchRadius;

    @Nullable
    private final Double deviceDataFetchTimeoutSeconds;

    @Nullable
    private final Double dontClearAllELogsLastMinutes;

    @Nullable
    private final Double dontClearUploadManagerCacheLastDays;

    @Nullable
    private final Integer eLogQueueSize;

    @Nullable
    private final Integer eLogReportAttemptsLimit;

    @Nullable
    private final Integer elogLevel;

    @Nullable
    private final Integer elogLevelSendingBatchSize;

    @Nullable
    private final Integer elogLevelSendingIntervalSeconds;

    @Nullable
    private final String elogUrl;

    @Nullable
    private final Boolean enableAutomaticPositioningDataPreloading;

    @Nullable
    private final Boolean enablePeriodicCacheRefreshing;

    @Nullable
    private final EngineConfigResponse engine;

    @Nullable
    private final Integer engineSessionFetchRetryCount;

    @Nullable
    private final Double engineSessionFetchRetryInterval;

    @Nullable
    private final Boolean eventTagsCachingEnabled;

    @Nullable
    private final Integer eventTagsMaxRetryCount;

    @Nullable
    private final Integer eventTagsMaxTagsPerRetry;

    @Nullable
    private final Double eventTagsRetryIntervalSeconds;

    @Nullable
    private final Double foregroundServiceMonitoringIntervalSec;

    @Nullable
    private final Double freezeMonitoringIntervalSec;

    @Nullable
    private final Double freezeRecoveryWaitingDurationSec;

    @Nullable
    private final Double freezeRestartWaitingDurationSec;

    @Nullable
    private final Double freezeSensorsDataRelevanceLimitPressureSec;

    @Nullable
    private final Double freezeSensorsDataRelevanceLimitSec;

    @Nullable
    private final Integer geoAcceptedAccuracyMeters;

    @Nullable
    private final GeofenceConfigResponse geofence;

    @Nullable
    private final Integer inMemoryStorageCleanUpLimit;

    @Nullable
    private final Integer inMemoryStorageLimit;

    @Nullable
    private final Boolean isAutoCalibCheckPeriodicallyEnable;

    @Nullable
    private final Boolean isDebugDataManagerEnabled;

    @Nullable
    private final Boolean isMapImagesPreloadingEnabled;

    @Nullable
    private final Boolean isSilentModeEnabled;

    @Nullable
    private final Double mapDataExpirationTimeMinutes;

    @Nullable
    private final String mapGridFetchingStrategy;

    @Nullable
    private final String mapGridType;

    @Nullable
    private final Double mapGridUrlExpirationTimeMinutes;

    @Nullable
    private final Integer maxConcurrentDownloadTasks;

    @Nullable
    private final Integer maxLiveNavigationRetryAttempts;

    @Nullable
    private final Integer maxProximityDataRetryAttempts;

    @Nullable
    private final Integer maxSessionLengthMin;

    @Nullable
    private final Integer metricsLevel;

    @Nullable
    private final Float minDistanceToRecalculateNavRouteMeters;

    @Nullable
    private final Boolean monitorFreezes;

    @Nullable
    private final NavigationConfigResponse navigationEngine;

    @Nullable
    private final Float nearbyBuildingsSearchRadiusMeters;

    @Nullable
    private final Double periodicCacheRefreshingTimeHours;

    @Nullable
    private final PlaiConfigResponse plai;

    @Nullable
    private final PositioningConfigResponse positioning;

    @Nullable
    private final ProximityConfigResponse proximity;

    @Nullable
    private final Float recoveryAttemptIntervalSec;

    @Nullable
    private final Integer recoveryAttemptsLimit;

    @Nullable
    private final Boolean requiredCalibrationOnFailedCheck;

    @Nullable
    private final Integer restConnectTimeoutSec;

    @Nullable
    private final Integer restReadTimeoutSec;

    @Nullable
    private final Float secondsToIndicateLimitedConnection;

    @Nullable
    private final Double sensorIssuesELogIntervalSec;

    @Nullable
    private final Double sensorSamplingRateHz;

    @Nullable
    private final SensorsConfigResponse sensorsConfig;

    @Nullable
    private final Integer sensorsDataBufferSize;

    @Nullable
    private final Boolean shouldNeverStopPressure;

    @Nullable
    private final Boolean shouldUseElog;

    @Nullable
    private final Boolean shouldUseTailTrimming;

    @Nullable
    private final SnappingConfigResponse snapping;

    @Nullable
    private final Integer startPositioningRetryCount;

    @Nullable
    private final Float startPositioningRetryIntervalSec;

    @Nullable
    private final Integer startReportingRetryCount;

    @Nullable
    private final Double startReportingRetryInterval;

    @Nullable
    private final Boolean stopSessionIfSensorDataOutdated;

    @Nullable
    private final Boolean stopSessionOnSensorError;

    @Nullable
    private final Float tailTrimming_AcceptableDistanceToRouteSegmentMeters;

    @Nullable
    private final Boolean tailTrimming_AllowFirstWaypointTrimming;

    @Nullable
    private final Float tailTrimming_DistanceShrinkingRation;

    @Nullable
    private final Float tailTrimming_FirstWaypointTrimmingMaxDistance;

    @Nullable
    private final Float tailTrimming_RouteRecalculationDistanceMeters;

    @Nullable
    private final Float tailTrimming_RouteSegmentLengthMeters;

    @Nullable
    private final Float tailTrimming_maxPositionJumpMeters;

    @Nullable
    private final TurnByTurnConfigResponse turnByTurn;

    @Nullable
    private final Boolean useFusedLocationProvider;

    @Nullable
    private final Boolean useNewSensorManager;

    @Nullable
    private final Boolean validateSamples;

    @Metadata(d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\b\u0086\u0003\u0018\u00002\u00020\u0001J\u0016\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00030\u0002HÆ\u0001¢\u0006\u0004\b\u0004\u0010\u0005¨\u0006\u0006"}, d2 = {"Lme/oriient/ipssdk/base/remoteconfig/responses/RemoteConfigResponse$Companion;", "", "Lkotlinx/serialization/KSerializer;", "Lme/oriient/ipssdk/base/remoteconfig/responses/RemoteConfigResponse;", "serializer", "()Lkotlinx/serialization/KSerializer;", "me.oriient.sdk-base"}, k = 1, mv = {1, 9, 0}, xi = 48)
    public static final class Companion {
        public Companion(DefaultConstructorMarker defaultConstructorMarker) {
        }

        @NotNull
        public final KSerializer<RemoteConfigResponse> serializer() {
            return RemoteConfigResponse$$serializer.INSTANCE;
        }
    }

    public RemoteConfigResponse() {
        this((Boolean) null, (Integer) null, (Integer) null, (String) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null, (Double) null, (Boolean) null, (Boolean) null, (Boolean) null, (Double) null, (Float) null, (Float) null, (Float) null, (Float) null, (Boolean) null, (Boolean) null, (Float) null, (Float) null, (Float) null, (Float) null, (Float) null, (Boolean) null, (Float) null, (Float) null, (Integer) null, (Float) null, (Boolean) null, (Integer) null, (Float) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null, (Double) null, (Boolean) null, (Double) null, (Integer) null, (Double) null, (Integer) null, (Integer) null, (Double) null, (Boolean) null, (Double) null, (Double) null, (Integer) null, (Double) null, (Integer) null, (Boolean) null, (Double) null, (Boolean) null, (Double) null, (Double) null, (Integer) null, (Integer) null, (Boolean) null, (Double) null, (Long) null, (Boolean) null, (Double) null, (Integer) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Boolean) null, (Boolean) null, (Boolean) null, (Boolean) null, (Boolean) null, (Double) null, (SensorsConfigResponse) null, (Boolean) null, (EngineConfigResponse) null, (String) null, (String) null, (Double) null, (NavigationConfigResponse) null, (Boolean) null, (AuthConfigResponse) null, (GeofenceConfigResponse) null, (PositioningConfigResponse) null, (TurnByTurnConfigResponse) null, (ProximityConfigResponse) null, (SnappingConfigResponse) null, (PlaiConfigResponse) null, -1, -1, 536870911, (DefaultConstructorMarker) null);
    }

    public static /* synthetic */ RemoteConfigResponse copy$default(RemoteConfigResponse remoteConfigResponse, Boolean bool, Integer num, Integer num2, String str, Integer num3, Integer num4, Integer num5, Integer num6, Integer num7, Integer num8, Integer num9, Integer num10, Double d, Boolean bool2, Boolean bool3, Boolean bool4, Double d2, Float f, Float f2, Float f3, Float f4, Boolean bool5, Boolean bool6, Float f5, Float f6, Float f7, Float f8, Float f9, Boolean bool7, Float f10, Float f11, Integer num11, Float f12, Boolean bool8, Integer num12, Float f13, Integer num13, Integer num14, Integer num15, Integer num16, Double d3, Boolean bool9, Double d4, Integer num17, Double d5, Integer num18, Integer num19, Double d6, Boolean bool10, Double d7, Double d8, Integer num20, Double d9, Integer num21, Boolean bool11, Double d10, Boolean bool12, Double d11, Double d12, Integer num22, Integer num23, Boolean bool13, Double d13, Long l, Boolean bool14, Double d14, Integer num24, Double d15, Double d16, Double d17, Double d18, Double d19, Boolean bool15, Boolean bool16, Boolean bool17, Boolean bool18, Boolean bool19, Double d20, SensorsConfigResponse sensorsConfigResponse, Boolean bool20, EngineConfigResponse engineConfigResponse, String str2, String str3, Double d21, NavigationConfigResponse navigationConfigResponse, Boolean bool21, AuthConfigResponse authConfigResponse, GeofenceConfigResponse geofenceConfigResponse, PositioningConfigResponse positioningConfigResponse, TurnByTurnConfigResponse turnByTurnConfigResponse, ProximityConfigResponse proximityConfigResponse, SnappingConfigResponse snappingConfigResponse, PlaiConfigResponse plaiConfigResponse, int i, int i2, int i3, Object obj) {
        Boolean bool22 = (i & 1) != 0 ? remoteConfigResponse.shouldUseElog : bool;
        return remoteConfigResponse.copy(bool22, (i & 2) != 0 ? remoteConfigResponse.elogLevel : num, (i & 4) != 0 ? remoteConfigResponse.metricsLevel : num2, (i & 8) != 0 ? remoteConfigResponse.elogUrl : str, (i & 16) != 0 ? remoteConfigResponse.eLogQueueSize : num3, (i & 32) != 0 ? remoteConfigResponse.eLogReportAttemptsLimit : num4, (i & 64) != 0 ? remoteConfigResponse.restReadTimeoutSec : num5, (i & 128) != 0 ? remoteConfigResponse.restConnectTimeoutSec : num6, (i & 256) != 0 ? remoteConfigResponse.maxSessionLengthMin : num7, (i & 512) != 0 ? remoteConfigResponse.geoAcceptedAccuracyMeters : num8, (i & 1024) != 0 ? remoteConfigResponse.elogLevelSendingBatchSize : num9, (i & 2048) != 0 ? remoteConfigResponse.elogLevelSendingIntervalSeconds : num10, (i & 4096) != 0 ? remoteConfigResponse.foregroundServiceMonitoringIntervalSec : d, (i & 8192) != 0 ? remoteConfigResponse.useFusedLocationProvider : bool2, (i & 16384) != 0 ? remoteConfigResponse.considerGeofenceAlwaysInside : bool3, (i & 32768) != 0 ? remoteConfigResponse.enablePeriodicCacheRefreshing : bool4, (i & 65536) != 0 ? remoteConfigResponse.periodicCacheRefreshingTimeHours : d2, (i & 131072) != 0 ? remoteConfigResponse.minDistanceToRecalculateNavRouteMeters : f, (i & 262144) != 0 ? remoteConfigResponse.calibrationNeededCheckIntervalMinutes : f2, (i & 524288) != 0 ? remoteConfigResponse.defaultBuildingsFetchRadius : f3, (i & 1048576) != 0 ? remoteConfigResponse.nearbyBuildingsSearchRadiusMeters : f4, (i & 2097152) != 0 ? remoteConfigResponse.requiredCalibrationOnFailedCheck : bool5, (i & 4194304) != 0 ? remoteConfigResponse.shouldUseTailTrimming : bool6, (i & 8388608) != 0 ? remoteConfigResponse.tailTrimming_maxPositionJumpMeters : f5, (i & 16777216) != 0 ? remoteConfigResponse.tailTrimming_AcceptableDistanceToRouteSegmentMeters : f6, (i & 33554432) != 0 ? remoteConfigResponse.tailTrimming_RouteSegmentLengthMeters : f7, (i & 67108864) != 0 ? remoteConfigResponse.tailTrimming_DistanceShrinkingRation : f8, (i & 134217728) != 0 ? remoteConfigResponse.tailTrimming_RouteRecalculationDistanceMeters : f9, (i & 268435456) != 0 ? remoteConfigResponse.tailTrimming_AllowFirstWaypointTrimming : bool7, (i & 536870912) != 0 ? remoteConfigResponse.tailTrimming_FirstWaypointTrimmingMaxDistance : f10, (i & 1073741824) != 0 ? remoteConfigResponse.secondsToIndicateLimitedConnection : f11, (i & Integer.MIN_VALUE) != 0 ? remoteConfigResponse.recoveryAttemptsLimit : num11, (i2 & 1) != 0 ? remoteConfigResponse.recoveryAttemptIntervalSec : f12, (i2 & 2) != 0 ? remoteConfigResponse.allowNoBarometerPositioningInMultifloor : bool8, (i2 & 4) != 0 ? remoteConfigResponse.startPositioningRetryCount : num12, (i2 & 8) != 0 ? remoteConfigResponse.startPositioningRetryIntervalSec : f13, (i2 & 16) != 0 ? remoteConfigResponse.dataLoadingRetryRequestCount : num13, (i2 & 32) != 0 ? remoteConfigResponse.inMemoryStorageLimit : num14, (i2 & 64) != 0 ? remoteConfigResponse.maxConcurrentDownloadTasks : num15, (i2 & 128) != 0 ? remoteConfigResponse.inMemoryStorageCleanUpLimit : num16, (i2 & 256) != 0 ? remoteConfigResponse.mapDataExpirationTimeMinutes : d3, (i2 & 512) != 0 ? remoteConfigResponse.isMapImagesPreloadingEnabled : bool9, (i2 & 1024) != 0 ? remoteConfigResponse.engineSessionFetchRetryInterval : d4, (i2 & 2048) != 0 ? remoteConfigResponse.engineSessionFetchRetryCount : num17, (i2 & 4096) != 0 ? remoteConfigResponse.configFetchRetryInterval : d5, (i2 & 8192) != 0 ? remoteConfigResponse.configFetchRetryCount : num18, (i2 & 16384) != 0 ? remoteConfigResponse.startReportingRetryCount : num19, (i2 & 32768) != 0 ? remoteConfigResponse.startReportingRetryInterval : d6, (i2 & 65536) != 0 ? remoteConfigResponse.allowClearAllCaches : bool10, (i2 & 131072) != 0 ? remoteConfigResponse.dontClearUploadManagerCacheLastDays : d7, (i2 & 262144) != 0 ? remoteConfigResponse.dontClearAllELogsLastMinutes : d8, (i2 & 524288) != 0 ? remoteConfigResponse.eventTagsMaxRetryCount : num20, (i2 & 1048576) != 0 ? remoteConfigResponse.eventTagsRetryIntervalSeconds : d9, (i2 & 2097152) != 0 ? remoteConfigResponse.eventTagsMaxTagsPerRetry : num21, (i2 & 4194304) != 0 ? remoteConfigResponse.eventTagsCachingEnabled : bool11, (i2 & 8388608) != 0 ? remoteConfigResponse.deviceDataFetchTimeoutSeconds : d10, (i2 & 16777216) != 0 ? remoteConfigResponse.isAutoCalibCheckPeriodicallyEnable : bool12, (i2 & 33554432) != 0 ? remoteConfigResponse.autoCalibCheckTimeIntervalSec : d11, (i2 & 67108864) != 0 ? remoteConfigResponse.additionalPercentageToEnterGeofence : d12, (i2 & 134217728) != 0 ? remoteConfigResponse.maxLiveNavigationRetryAttempts : num22, (i2 & 268435456) != 0 ? remoteConfigResponse.maxProximityDataRetryAttempts : num23, (i2 & 536870912) != 0 ? remoteConfigResponse.enableAutomaticPositioningDataPreloading : bool13, (i2 & 1073741824) != 0 ? remoteConfigResponse.dataExpirationTimeDays : d13, (i2 & Integer.MIN_VALUE) != 0 ? remoteConfigResponse.appSessionMaxInactivitySec : l, (i3 & 1) != 0 ? remoteConfigResponse.isSilentModeEnabled : bool14, (i3 & 2) != 0 ? remoteConfigResponse.sensorSamplingRateHz : d14, (i3 & 4) != 0 ? remoteConfigResponse.sensorsDataBufferSize : num24, (i3 & 8) != 0 ? remoteConfigResponse.freezeSensorsDataRelevanceLimitSec : d15, (i3 & 16) != 0 ? remoteConfigResponse.freezeSensorsDataRelevanceLimitPressureSec : d16, (i3 & 32) != 0 ? remoteConfigResponse.freezeMonitoringIntervalSec : d17, (i3 & 64) != 0 ? remoteConfigResponse.freezeRecoveryWaitingDurationSec : d18, (i3 & 128) != 0 ? remoteConfigResponse.freezeRestartWaitingDurationSec : d19, (i3 & 256) != 0 ? remoteConfigResponse.useNewSensorManager : bool15, (i3 & 512) != 0 ? remoteConfigResponse.monitorFreezes : bool16, (i3 & 1024) != 0 ? remoteConfigResponse.validateSamples : bool17, (i3 & 2048) != 0 ? remoteConfigResponse.stopSessionOnSensorError : bool18, (i3 & 4096) != 0 ? remoteConfigResponse.stopSessionIfSensorDataOutdated : bool19, (i3 & 8192) != 0 ? remoteConfigResponse.sensorIssuesELogIntervalSec : d20, (i3 & 16384) != 0 ? remoteConfigResponse.sensorsConfig : sensorsConfigResponse, (i3 & 32768) != 0 ? remoteConfigResponse.shouldNeverStopPressure : bool20, (i3 & 65536) != 0 ? remoteConfigResponse.engine : engineConfigResponse, (i3 & 131072) != 0 ? remoteConfigResponse.mapGridFetchingStrategy : str2, (i3 & 262144) != 0 ? remoteConfigResponse.mapGridType : str3, (i3 & 524288) != 0 ? remoteConfigResponse.mapGridUrlExpirationTimeMinutes : d21, (i3 & 1048576) != 0 ? remoteConfigResponse.navigationEngine : navigationConfigResponse, (i3 & 2097152) != 0 ? remoteConfigResponse.isDebugDataManagerEnabled : bool21, (i3 & 4194304) != 0 ? remoteConfigResponse.auth : authConfigResponse, (i3 & 8388608) != 0 ? remoteConfigResponse.geofence : geofenceConfigResponse, (i3 & 16777216) != 0 ? remoteConfigResponse.positioning : positioningConfigResponse, (i3 & 33554432) != 0 ? remoteConfigResponse.turnByTurn : turnByTurnConfigResponse, (i3 & 67108864) != 0 ? remoteConfigResponse.proximity : proximityConfigResponse, (i3 & 134217728) != 0 ? remoteConfigResponse.snapping : snappingConfigResponse, (i3 & 268435456) != 0 ? remoteConfigResponse.plai : plaiConfigResponse);
    }

    @JvmStatic
    public static final /* synthetic */ void write$Self$me_oriient_sdk_base(RemoteConfigResponse self, CompositeEncoder output, SerialDescriptor serialDesc) {
        if (output.q(serialDesc, 0) || self.shouldUseElog != null) {
            output.w(serialDesc, 0, BooleanSerializer.f24779a, self.shouldUseElog);
        }
        if (output.q(serialDesc, 1) || self.elogLevel != null) {
            output.w(serialDesc, 1, IntSerializer.f24800a, self.elogLevel);
        }
        if (output.q(serialDesc, 2) || self.metricsLevel != null) {
            output.w(serialDesc, 2, IntSerializer.f24800a, self.metricsLevel);
        }
        if (output.q(serialDesc, 3) || self.elogUrl != null) {
            output.w(serialDesc, 3, StringSerializer.f24821a, self.elogUrl);
        }
        if (output.q(serialDesc, 4) || self.eLogQueueSize != null) {
            output.w(serialDesc, 4, IntSerializer.f24800a, self.eLogQueueSize);
        }
        if (output.q(serialDesc, 5) || self.eLogReportAttemptsLimit != null) {
            output.w(serialDesc, 5, IntSerializer.f24800a, self.eLogReportAttemptsLimit);
        }
        if (output.q(serialDesc, 6) || self.restReadTimeoutSec != null) {
            output.w(serialDesc, 6, IntSerializer.f24800a, self.restReadTimeoutSec);
        }
        if (output.q(serialDesc, 7) || self.restConnectTimeoutSec != null) {
            output.w(serialDesc, 7, IntSerializer.f24800a, self.restConnectTimeoutSec);
        }
        if (output.q(serialDesc, 8) || self.maxSessionLengthMin != null) {
            output.w(serialDesc, 8, IntSerializer.f24800a, self.maxSessionLengthMin);
        }
        if (output.q(serialDesc, 9) || self.geoAcceptedAccuracyMeters != null) {
            output.w(serialDesc, 9, IntSerializer.f24800a, self.geoAcceptedAccuracyMeters);
        }
        if (output.q(serialDesc, 10) || self.elogLevelSendingBatchSize != null) {
            output.w(serialDesc, 10, IntSerializer.f24800a, self.elogLevelSendingBatchSize);
        }
        if (output.q(serialDesc, 11) || self.elogLevelSendingIntervalSeconds != null) {
            output.w(serialDesc, 11, IntSerializer.f24800a, self.elogLevelSendingIntervalSeconds);
        }
        if (output.q(serialDesc, 12) || self.foregroundServiceMonitoringIntervalSec != null) {
            output.w(serialDesc, 12, DoubleSerializer.f24792a, self.foregroundServiceMonitoringIntervalSec);
        }
        if (output.q(serialDesc, 13) || self.useFusedLocationProvider != null) {
            output.w(serialDesc, 13, BooleanSerializer.f24779a, self.useFusedLocationProvider);
        }
        if (output.q(serialDesc, 14) || self.considerGeofenceAlwaysInside != null) {
            output.w(serialDesc, 14, BooleanSerializer.f24779a, self.considerGeofenceAlwaysInside);
        }
        if (output.q(serialDesc, 15) || self.enablePeriodicCacheRefreshing != null) {
            output.w(serialDesc, 15, BooleanSerializer.f24779a, self.enablePeriodicCacheRefreshing);
        }
        if (output.q(serialDesc, 16) || self.periodicCacheRefreshingTimeHours != null) {
            output.w(serialDesc, 16, DoubleSerializer.f24792a, self.periodicCacheRefreshingTimeHours);
        }
        if (output.q(serialDesc, 17) || self.minDistanceToRecalculateNavRouteMeters != null) {
            output.w(serialDesc, 17, FloatSerializer.f24797a, self.minDistanceToRecalculateNavRouteMeters);
        }
        if (output.q(serialDesc, 18) || self.calibrationNeededCheckIntervalMinutes != null) {
            output.w(serialDesc, 18, FloatSerializer.f24797a, self.calibrationNeededCheckIntervalMinutes);
        }
        if (output.q(serialDesc, 19) || self.defaultBuildingsFetchRadius != null) {
            output.w(serialDesc, 19, FloatSerializer.f24797a, self.defaultBuildingsFetchRadius);
        }
        if (output.q(serialDesc, 20) || self.nearbyBuildingsSearchRadiusMeters != null) {
            output.w(serialDesc, 20, FloatSerializer.f24797a, self.nearbyBuildingsSearchRadiusMeters);
        }
        if (output.q(serialDesc, 21) || self.requiredCalibrationOnFailedCheck != null) {
            output.w(serialDesc, 21, BooleanSerializer.f24779a, self.requiredCalibrationOnFailedCheck);
        }
        if (output.q(serialDesc, 22) || self.shouldUseTailTrimming != null) {
            output.w(serialDesc, 22, BooleanSerializer.f24779a, self.shouldUseTailTrimming);
        }
        if (output.q(serialDesc, 23) || self.tailTrimming_maxPositionJumpMeters != null) {
            output.w(serialDesc, 23, FloatSerializer.f24797a, self.tailTrimming_maxPositionJumpMeters);
        }
        if (output.q(serialDesc, 24) || self.tailTrimming_AcceptableDistanceToRouteSegmentMeters != null) {
            output.w(serialDesc, 24, FloatSerializer.f24797a, self.tailTrimming_AcceptableDistanceToRouteSegmentMeters);
        }
        if (output.q(serialDesc, 25) || self.tailTrimming_RouteSegmentLengthMeters != null) {
            output.w(serialDesc, 25, FloatSerializer.f24797a, self.tailTrimming_RouteSegmentLengthMeters);
        }
        if (output.q(serialDesc, 26) || self.tailTrimming_DistanceShrinkingRation != null) {
            output.w(serialDesc, 26, FloatSerializer.f24797a, self.tailTrimming_DistanceShrinkingRation);
        }
        if (output.q(serialDesc, 27) || self.tailTrimming_RouteRecalculationDistanceMeters != null) {
            output.w(serialDesc, 27, FloatSerializer.f24797a, self.tailTrimming_RouteRecalculationDistanceMeters);
        }
        if (output.q(serialDesc, 28) || self.tailTrimming_AllowFirstWaypointTrimming != null) {
            output.w(serialDesc, 28, BooleanSerializer.f24779a, self.tailTrimming_AllowFirstWaypointTrimming);
        }
        if (output.q(serialDesc, 29) || self.tailTrimming_FirstWaypointTrimmingMaxDistance != null) {
            output.w(serialDesc, 29, FloatSerializer.f24797a, self.tailTrimming_FirstWaypointTrimmingMaxDistance);
        }
        if (output.q(serialDesc, 30) || self.secondsToIndicateLimitedConnection != null) {
            output.w(serialDesc, 30, FloatSerializer.f24797a, self.secondsToIndicateLimitedConnection);
        }
        if (output.q(serialDesc, 31) || self.recoveryAttemptsLimit != null) {
            output.w(serialDesc, 31, IntSerializer.f24800a, self.recoveryAttemptsLimit);
        }
        if (output.q(serialDesc, 32) || self.recoveryAttemptIntervalSec != null) {
            output.w(serialDesc, 32, FloatSerializer.f24797a, self.recoveryAttemptIntervalSec);
        }
        if (output.q(serialDesc, 33) || self.allowNoBarometerPositioningInMultifloor != null) {
            output.w(serialDesc, 33, BooleanSerializer.f24779a, self.allowNoBarometerPositioningInMultifloor);
        }
        if (output.q(serialDesc, 34) || self.startPositioningRetryCount != null) {
            output.w(serialDesc, 34, IntSerializer.f24800a, self.startPositioningRetryCount);
        }
        if (output.q(serialDesc, 35) || self.startPositioningRetryIntervalSec != null) {
            output.w(serialDesc, 35, FloatSerializer.f24797a, self.startPositioningRetryIntervalSec);
        }
        if (output.q(serialDesc, 36) || self.dataLoadingRetryRequestCount != null) {
            output.w(serialDesc, 36, IntSerializer.f24800a, self.dataLoadingRetryRequestCount);
        }
        if (output.q(serialDesc, 37) || self.inMemoryStorageLimit != null) {
            output.w(serialDesc, 37, IntSerializer.f24800a, self.inMemoryStorageLimit);
        }
        if (output.q(serialDesc, 38) || self.maxConcurrentDownloadTasks != null) {
            output.w(serialDesc, 38, IntSerializer.f24800a, self.maxConcurrentDownloadTasks);
        }
        if (output.q(serialDesc, 39) || self.inMemoryStorageCleanUpLimit != null) {
            output.w(serialDesc, 39, IntSerializer.f24800a, self.inMemoryStorageCleanUpLimit);
        }
        if (output.q(serialDesc, 40) || self.mapDataExpirationTimeMinutes != null) {
            output.w(serialDesc, 40, DoubleSerializer.f24792a, self.mapDataExpirationTimeMinutes);
        }
        if (output.q(serialDesc, 41) || self.isMapImagesPreloadingEnabled != null) {
            output.w(serialDesc, 41, BooleanSerializer.f24779a, self.isMapImagesPreloadingEnabled);
        }
        if (output.q(serialDesc, 42) || self.engineSessionFetchRetryInterval != null) {
            output.w(serialDesc, 42, DoubleSerializer.f24792a, self.engineSessionFetchRetryInterval);
        }
        if (output.q(serialDesc, 43) || self.engineSessionFetchRetryCount != null) {
            output.w(serialDesc, 43, IntSerializer.f24800a, self.engineSessionFetchRetryCount);
        }
        if (output.q(serialDesc, 44) || self.configFetchRetryInterval != null) {
            output.w(serialDesc, 44, DoubleSerializer.f24792a, self.configFetchRetryInterval);
        }
        if (output.q(serialDesc, 45) || self.configFetchRetryCount != null) {
            output.w(serialDesc, 45, IntSerializer.f24800a, self.configFetchRetryCount);
        }
        if (output.q(serialDesc, 46) || self.startReportingRetryCount != null) {
            output.w(serialDesc, 46, IntSerializer.f24800a, self.startReportingRetryCount);
        }
        if (output.q(serialDesc, 47) || self.startReportingRetryInterval != null) {
            output.w(serialDesc, 47, DoubleSerializer.f24792a, self.startReportingRetryInterval);
        }
        if (output.q(serialDesc, 48) || self.allowClearAllCaches != null) {
            output.w(serialDesc, 48, BooleanSerializer.f24779a, self.allowClearAllCaches);
        }
        if (output.q(serialDesc, 49) || self.dontClearUploadManagerCacheLastDays != null) {
            output.w(serialDesc, 49, DoubleSerializer.f24792a, self.dontClearUploadManagerCacheLastDays);
        }
        if (output.q(serialDesc, 50) || self.dontClearAllELogsLastMinutes != null) {
            output.w(serialDesc, 50, DoubleSerializer.f24792a, self.dontClearAllELogsLastMinutes);
        }
        if (output.q(serialDesc, 51) || self.eventTagsMaxRetryCount != null) {
            output.w(serialDesc, 51, IntSerializer.f24800a, self.eventTagsMaxRetryCount);
        }
        if (output.q(serialDesc, 52) || self.eventTagsRetryIntervalSeconds != null) {
            output.w(serialDesc, 52, DoubleSerializer.f24792a, self.eventTagsRetryIntervalSeconds);
        }
        if (output.q(serialDesc, 53) || self.eventTagsMaxTagsPerRetry != null) {
            output.w(serialDesc, 53, IntSerializer.f24800a, self.eventTagsMaxTagsPerRetry);
        }
        if (output.q(serialDesc, 54) || self.eventTagsCachingEnabled != null) {
            output.w(serialDesc, 54, BooleanSerializer.f24779a, self.eventTagsCachingEnabled);
        }
        if (output.q(serialDesc, 55) || self.deviceDataFetchTimeoutSeconds != null) {
            output.w(serialDesc, 55, DoubleSerializer.f24792a, self.deviceDataFetchTimeoutSeconds);
        }
        if (output.q(serialDesc, 56) || self.isAutoCalibCheckPeriodicallyEnable != null) {
            output.w(serialDesc, 56, BooleanSerializer.f24779a, self.isAutoCalibCheckPeriodicallyEnable);
        }
        if (output.q(serialDesc, 57) || self.autoCalibCheckTimeIntervalSec != null) {
            output.w(serialDesc, 57, DoubleSerializer.f24792a, self.autoCalibCheckTimeIntervalSec);
        }
        if (output.q(serialDesc, 58) || self.additionalPercentageToEnterGeofence != null) {
            output.w(serialDesc, 58, DoubleSerializer.f24792a, self.additionalPercentageToEnterGeofence);
        }
        if (output.q(serialDesc, 59) || self.maxLiveNavigationRetryAttempts != null) {
            output.w(serialDesc, 59, IntSerializer.f24800a, self.maxLiveNavigationRetryAttempts);
        }
        if (output.q(serialDesc, 60) || self.maxProximityDataRetryAttempts != null) {
            output.w(serialDesc, 60, IntSerializer.f24800a, self.maxProximityDataRetryAttempts);
        }
        if (output.q(serialDesc, 61) || self.enableAutomaticPositioningDataPreloading != null) {
            output.w(serialDesc, 61, BooleanSerializer.f24779a, self.enableAutomaticPositioningDataPreloading);
        }
        if (output.q(serialDesc, 62) || self.dataExpirationTimeDays != null) {
            output.w(serialDesc, 62, DoubleSerializer.f24792a, self.dataExpirationTimeDays);
        }
        if (output.q(serialDesc, 63) || self.appSessionMaxInactivitySec != null) {
            output.w(serialDesc, 63, LongSerializer.f24804a, self.appSessionMaxInactivitySec);
        }
        if (output.q(serialDesc, 64) || self.isSilentModeEnabled != null) {
            output.w(serialDesc, 64, BooleanSerializer.f24779a, self.isSilentModeEnabled);
        }
        if (output.q(serialDesc, 65) || self.sensorSamplingRateHz != null) {
            output.w(serialDesc, 65, DoubleSerializer.f24792a, self.sensorSamplingRateHz);
        }
        if (output.q(serialDesc, 66) || self.sensorsDataBufferSize != null) {
            output.w(serialDesc, 66, IntSerializer.f24800a, self.sensorsDataBufferSize);
        }
        if (output.q(serialDesc, 67) || self.freezeSensorsDataRelevanceLimitSec != null) {
            output.w(serialDesc, 67, DoubleSerializer.f24792a, self.freezeSensorsDataRelevanceLimitSec);
        }
        if (output.q(serialDesc, 68) || self.freezeSensorsDataRelevanceLimitPressureSec != null) {
            output.w(serialDesc, 68, DoubleSerializer.f24792a, self.freezeSensorsDataRelevanceLimitPressureSec);
        }
        if (output.q(serialDesc, 69) || self.freezeMonitoringIntervalSec != null) {
            output.w(serialDesc, 69, DoubleSerializer.f24792a, self.freezeMonitoringIntervalSec);
        }
        if (output.q(serialDesc, 70) || self.freezeRecoveryWaitingDurationSec != null) {
            output.w(serialDesc, 70, DoubleSerializer.f24792a, self.freezeRecoveryWaitingDurationSec);
        }
        if (output.q(serialDesc, 71) || self.freezeRestartWaitingDurationSec != null) {
            output.w(serialDesc, 71, DoubleSerializer.f24792a, self.freezeRestartWaitingDurationSec);
        }
        if (output.q(serialDesc, 72) || self.useNewSensorManager != null) {
            output.w(serialDesc, 72, BooleanSerializer.f24779a, self.useNewSensorManager);
        }
        if (output.q(serialDesc, 73) || self.monitorFreezes != null) {
            output.w(serialDesc, 73, BooleanSerializer.f24779a, self.monitorFreezes);
        }
        if (output.q(serialDesc, 74) || self.validateSamples != null) {
            output.w(serialDesc, 74, BooleanSerializer.f24779a, self.validateSamples);
        }
        if (output.q(serialDesc, 75) || self.stopSessionOnSensorError != null) {
            output.w(serialDesc, 75, BooleanSerializer.f24779a, self.stopSessionOnSensorError);
        }
        if (output.q(serialDesc, 76) || self.stopSessionIfSensorDataOutdated != null) {
            output.w(serialDesc, 76, BooleanSerializer.f24779a, self.stopSessionIfSensorDataOutdated);
        }
        if (output.q(serialDesc, 77) || self.sensorIssuesELogIntervalSec != null) {
            output.w(serialDesc, 77, DoubleSerializer.f24792a, self.sensorIssuesELogIntervalSec);
        }
        if (output.q(serialDesc, 78) || self.sensorsConfig != null) {
            output.w(serialDesc, 78, SensorsConfigResponse$$serializer.INSTANCE, self.sensorsConfig);
        }
        if (output.q(serialDesc, 79) || self.shouldNeverStopPressure != null) {
            output.w(serialDesc, 79, BooleanSerializer.f24779a, self.shouldNeverStopPressure);
        }
        if (output.q(serialDesc, 80) || self.engine != null) {
            output.w(serialDesc, 80, EngineConfigResponse$$serializer.INSTANCE, self.engine);
        }
        if (output.q(serialDesc, 81) || self.mapGridFetchingStrategy != null) {
            output.w(serialDesc, 81, StringSerializer.f24821a, self.mapGridFetchingStrategy);
        }
        if (output.q(serialDesc, 82) || self.mapGridType != null) {
            output.w(serialDesc, 82, StringSerializer.f24821a, self.mapGridType);
        }
        if (output.q(serialDesc, 83) || self.mapGridUrlExpirationTimeMinutes != null) {
            output.w(serialDesc, 83, DoubleSerializer.f24792a, self.mapGridUrlExpirationTimeMinutes);
        }
        if (output.q(serialDesc, 84) || self.navigationEngine != null) {
            output.w(serialDesc, 84, NavigationConfigResponse$$serializer.INSTANCE, self.navigationEngine);
        }
        if (output.q(serialDesc, 85) || self.isDebugDataManagerEnabled != null) {
            output.w(serialDesc, 85, BooleanSerializer.f24779a, self.isDebugDataManagerEnabled);
        }
        if (output.q(serialDesc, 86) || self.auth != null) {
            output.w(serialDesc, 86, AuthConfigResponse$$serializer.INSTANCE, self.auth);
        }
        if (output.q(serialDesc, 87) || self.geofence != null) {
            output.w(serialDesc, 87, GeofenceConfigResponse$$serializer.INSTANCE, self.geofence);
        }
        if (output.q(serialDesc, 88) || self.positioning != null) {
            output.w(serialDesc, 88, PositioningConfigResponse$$serializer.INSTANCE, self.positioning);
        }
        if (output.q(serialDesc, 89) || self.turnByTurn != null) {
            output.w(serialDesc, 89, TurnByTurnConfigResponse$$serializer.INSTANCE, self.turnByTurn);
        }
        if (output.q(serialDesc, 90) || self.proximity != null) {
            output.w(serialDesc, 90, ProximityConfigResponse$$serializer.INSTANCE, self.proximity);
        }
        if (output.q(serialDesc, 91) || self.snapping != null) {
            output.w(serialDesc, 91, SnappingConfigResponse$$serializer.INSTANCE, self.snapping);
        }
        if (!output.q(serialDesc, 92) && self.plai == null) {
            return;
        }
        output.w(serialDesc, 92, PlaiConfigResponse$$serializer.INSTANCE, self.plai);
    }

    @Nullable
    /* renamed from: component1, reason: from getter */
    public final Boolean getShouldUseElog() {
        return this.shouldUseElog;
    }

    @Nullable
    /* renamed from: component10, reason: from getter */
    public final Integer getGeoAcceptedAccuracyMeters() {
        return this.geoAcceptedAccuracyMeters;
    }

    @Nullable
    /* renamed from: component11, reason: from getter */
    public final Integer getElogLevelSendingBatchSize() {
        return this.elogLevelSendingBatchSize;
    }

    @Nullable
    /* renamed from: component12, reason: from getter */
    public final Integer getElogLevelSendingIntervalSeconds() {
        return this.elogLevelSendingIntervalSeconds;
    }

    @Nullable
    /* renamed from: component13, reason: from getter */
    public final Double getForegroundServiceMonitoringIntervalSec() {
        return this.foregroundServiceMonitoringIntervalSec;
    }

    @Nullable
    /* renamed from: component14, reason: from getter */
    public final Boolean getUseFusedLocationProvider() {
        return this.useFusedLocationProvider;
    }

    @Nullable
    /* renamed from: component15, reason: from getter */
    public final Boolean getConsiderGeofenceAlwaysInside() {
        return this.considerGeofenceAlwaysInside;
    }

    @Nullable
    /* renamed from: component16, reason: from getter */
    public final Boolean getEnablePeriodicCacheRefreshing() {
        return this.enablePeriodicCacheRefreshing;
    }

    @Nullable
    /* renamed from: component17, reason: from getter */
    public final Double getPeriodicCacheRefreshingTimeHours() {
        return this.periodicCacheRefreshingTimeHours;
    }

    @Nullable
    /* renamed from: component18, reason: from getter */
    public final Float getMinDistanceToRecalculateNavRouteMeters() {
        return this.minDistanceToRecalculateNavRouteMeters;
    }

    @Nullable
    /* renamed from: component19, reason: from getter */
    public final Float getCalibrationNeededCheckIntervalMinutes() {
        return this.calibrationNeededCheckIntervalMinutes;
    }

    @Nullable
    /* renamed from: component2, reason: from getter */
    public final Integer getElogLevel() {
        return this.elogLevel;
    }

    @Nullable
    /* renamed from: component20, reason: from getter */
    public final Float getDefaultBuildingsFetchRadius() {
        return this.defaultBuildingsFetchRadius;
    }

    @Nullable
    /* renamed from: component21, reason: from getter */
    public final Float getNearbyBuildingsSearchRadiusMeters() {
        return this.nearbyBuildingsSearchRadiusMeters;
    }

    @Nullable
    /* renamed from: component22, reason: from getter */
    public final Boolean getRequiredCalibrationOnFailedCheck() {
        return this.requiredCalibrationOnFailedCheck;
    }

    @Nullable
    /* renamed from: component23, reason: from getter */
    public final Boolean getShouldUseTailTrimming() {
        return this.shouldUseTailTrimming;
    }

    @Nullable
    /* renamed from: component24, reason: from getter */
    public final Float getTailTrimming_maxPositionJumpMeters() {
        return this.tailTrimming_maxPositionJumpMeters;
    }

    @Nullable
    /* renamed from: component25, reason: from getter */
    public final Float getTailTrimming_AcceptableDistanceToRouteSegmentMeters() {
        return this.tailTrimming_AcceptableDistanceToRouteSegmentMeters;
    }

    @Nullable
    /* renamed from: component26, reason: from getter */
    public final Float getTailTrimming_RouteSegmentLengthMeters() {
        return this.tailTrimming_RouteSegmentLengthMeters;
    }

    @Nullable
    /* renamed from: component27, reason: from getter */
    public final Float getTailTrimming_DistanceShrinkingRation() {
        return this.tailTrimming_DistanceShrinkingRation;
    }

    @Nullable
    /* renamed from: component28, reason: from getter */
    public final Float getTailTrimming_RouteRecalculationDistanceMeters() {
        return this.tailTrimming_RouteRecalculationDistanceMeters;
    }

    @Nullable
    /* renamed from: component29, reason: from getter */
    public final Boolean getTailTrimming_AllowFirstWaypointTrimming() {
        return this.tailTrimming_AllowFirstWaypointTrimming;
    }

    @Nullable
    /* renamed from: component3, reason: from getter */
    public final Integer getMetricsLevel() {
        return this.metricsLevel;
    }

    @Nullable
    /* renamed from: component30, reason: from getter */
    public final Float getTailTrimming_FirstWaypointTrimmingMaxDistance() {
        return this.tailTrimming_FirstWaypointTrimmingMaxDistance;
    }

    @Nullable
    /* renamed from: component31, reason: from getter */
    public final Float getSecondsToIndicateLimitedConnection() {
        return this.secondsToIndicateLimitedConnection;
    }

    @Nullable
    /* renamed from: component32, reason: from getter */
    public final Integer getRecoveryAttemptsLimit() {
        return this.recoveryAttemptsLimit;
    }

    @Nullable
    /* renamed from: component33, reason: from getter */
    public final Float getRecoveryAttemptIntervalSec() {
        return this.recoveryAttemptIntervalSec;
    }

    @Nullable
    /* renamed from: component34, reason: from getter */
    public final Boolean getAllowNoBarometerPositioningInMultifloor() {
        return this.allowNoBarometerPositioningInMultifloor;
    }

    @Nullable
    /* renamed from: component35, reason: from getter */
    public final Integer getStartPositioningRetryCount() {
        return this.startPositioningRetryCount;
    }

    @Nullable
    /* renamed from: component36, reason: from getter */
    public final Float getStartPositioningRetryIntervalSec() {
        return this.startPositioningRetryIntervalSec;
    }

    @Nullable
    /* renamed from: component37, reason: from getter */
    public final Integer getDataLoadingRetryRequestCount() {
        return this.dataLoadingRetryRequestCount;
    }

    @Nullable
    /* renamed from: component38, reason: from getter */
    public final Integer getInMemoryStorageLimit() {
        return this.inMemoryStorageLimit;
    }

    @Nullable
    /* renamed from: component39, reason: from getter */
    public final Integer getMaxConcurrentDownloadTasks() {
        return this.maxConcurrentDownloadTasks;
    }

    @Nullable
    /* renamed from: component4, reason: from getter */
    public final String getElogUrl() {
        return this.elogUrl;
    }

    @Nullable
    /* renamed from: component40, reason: from getter */
    public final Integer getInMemoryStorageCleanUpLimit() {
        return this.inMemoryStorageCleanUpLimit;
    }

    @Nullable
    /* renamed from: component41, reason: from getter */
    public final Double getMapDataExpirationTimeMinutes() {
        return this.mapDataExpirationTimeMinutes;
    }

    @Nullable
    /* renamed from: component42, reason: from getter */
    public final Boolean getIsMapImagesPreloadingEnabled() {
        return this.isMapImagesPreloadingEnabled;
    }

    @Nullable
    /* renamed from: component43, reason: from getter */
    public final Double getEngineSessionFetchRetryInterval() {
        return this.engineSessionFetchRetryInterval;
    }

    @Nullable
    /* renamed from: component44, reason: from getter */
    public final Integer getEngineSessionFetchRetryCount() {
        return this.engineSessionFetchRetryCount;
    }

    @Nullable
    /* renamed from: component45, reason: from getter */
    public final Double getConfigFetchRetryInterval() {
        return this.configFetchRetryInterval;
    }

    @Nullable
    /* renamed from: component46, reason: from getter */
    public final Integer getConfigFetchRetryCount() {
        return this.configFetchRetryCount;
    }

    @Nullable
    /* renamed from: component47, reason: from getter */
    public final Integer getStartReportingRetryCount() {
        return this.startReportingRetryCount;
    }

    @Nullable
    /* renamed from: component48, reason: from getter */
    public final Double getStartReportingRetryInterval() {
        return this.startReportingRetryInterval;
    }

    @Nullable
    /* renamed from: component49, reason: from getter */
    public final Boolean getAllowClearAllCaches() {
        return this.allowClearAllCaches;
    }

    @Nullable
    /* renamed from: component5, reason: from getter */
    public final Integer getELogQueueSize() {
        return this.eLogQueueSize;
    }

    @Nullable
    /* renamed from: component50, reason: from getter */
    public final Double getDontClearUploadManagerCacheLastDays() {
        return this.dontClearUploadManagerCacheLastDays;
    }

    @Nullable
    /* renamed from: component51, reason: from getter */
    public final Double getDontClearAllELogsLastMinutes() {
        return this.dontClearAllELogsLastMinutes;
    }

    @Nullable
    /* renamed from: component52, reason: from getter */
    public final Integer getEventTagsMaxRetryCount() {
        return this.eventTagsMaxRetryCount;
    }

    @Nullable
    /* renamed from: component53, reason: from getter */
    public final Double getEventTagsRetryIntervalSeconds() {
        return this.eventTagsRetryIntervalSeconds;
    }

    @Nullable
    /* renamed from: component54, reason: from getter */
    public final Integer getEventTagsMaxTagsPerRetry() {
        return this.eventTagsMaxTagsPerRetry;
    }

    @Nullable
    /* renamed from: component55, reason: from getter */
    public final Boolean getEventTagsCachingEnabled() {
        return this.eventTagsCachingEnabled;
    }

    @Nullable
    /* renamed from: component56, reason: from getter */
    public final Double getDeviceDataFetchTimeoutSeconds() {
        return this.deviceDataFetchTimeoutSeconds;
    }

    @Nullable
    /* renamed from: component57, reason: from getter */
    public final Boolean getIsAutoCalibCheckPeriodicallyEnable() {
        return this.isAutoCalibCheckPeriodicallyEnable;
    }

    @Nullable
    /* renamed from: component58, reason: from getter */
    public final Double getAutoCalibCheckTimeIntervalSec() {
        return this.autoCalibCheckTimeIntervalSec;
    }

    @Nullable
    /* renamed from: component59, reason: from getter */
    public final Double getAdditionalPercentageToEnterGeofence() {
        return this.additionalPercentageToEnterGeofence;
    }

    @Nullable
    /* renamed from: component6, reason: from getter */
    public final Integer getELogReportAttemptsLimit() {
        return this.eLogReportAttemptsLimit;
    }

    @Nullable
    /* renamed from: component60, reason: from getter */
    public final Integer getMaxLiveNavigationRetryAttempts() {
        return this.maxLiveNavigationRetryAttempts;
    }

    @Nullable
    /* renamed from: component61, reason: from getter */
    public final Integer getMaxProximityDataRetryAttempts() {
        return this.maxProximityDataRetryAttempts;
    }

    @Nullable
    /* renamed from: component62, reason: from getter */
    public final Boolean getEnableAutomaticPositioningDataPreloading() {
        return this.enableAutomaticPositioningDataPreloading;
    }

    @Nullable
    /* renamed from: component63, reason: from getter */
    public final Double getDataExpirationTimeDays() {
        return this.dataExpirationTimeDays;
    }

    @Nullable
    /* renamed from: component64, reason: from getter */
    public final Long getAppSessionMaxInactivitySec() {
        return this.appSessionMaxInactivitySec;
    }

    @Nullable
    /* renamed from: component65, reason: from getter */
    public final Boolean getIsSilentModeEnabled() {
        return this.isSilentModeEnabled;
    }

    @Nullable
    /* renamed from: component66, reason: from getter */
    public final Double getSensorSamplingRateHz() {
        return this.sensorSamplingRateHz;
    }

    @Nullable
    /* renamed from: component67, reason: from getter */
    public final Integer getSensorsDataBufferSize() {
        return this.sensorsDataBufferSize;
    }

    @Nullable
    /* renamed from: component68, reason: from getter */
    public final Double getFreezeSensorsDataRelevanceLimitSec() {
        return this.freezeSensorsDataRelevanceLimitSec;
    }

    @Nullable
    /* renamed from: component69, reason: from getter */
    public final Double getFreezeSensorsDataRelevanceLimitPressureSec() {
        return this.freezeSensorsDataRelevanceLimitPressureSec;
    }

    @Nullable
    /* renamed from: component7, reason: from getter */
    public final Integer getRestReadTimeoutSec() {
        return this.restReadTimeoutSec;
    }

    @Nullable
    /* renamed from: component70, reason: from getter */
    public final Double getFreezeMonitoringIntervalSec() {
        return this.freezeMonitoringIntervalSec;
    }

    @Nullable
    /* renamed from: component71, reason: from getter */
    public final Double getFreezeRecoveryWaitingDurationSec() {
        return this.freezeRecoveryWaitingDurationSec;
    }

    @Nullable
    /* renamed from: component72, reason: from getter */
    public final Double getFreezeRestartWaitingDurationSec() {
        return this.freezeRestartWaitingDurationSec;
    }

    @Nullable
    /* renamed from: component73, reason: from getter */
    public final Boolean getUseNewSensorManager() {
        return this.useNewSensorManager;
    }

    @Nullable
    /* renamed from: component74, reason: from getter */
    public final Boolean getMonitorFreezes() {
        return this.monitorFreezes;
    }

    @Nullable
    /* renamed from: component75, reason: from getter */
    public final Boolean getValidateSamples() {
        return this.validateSamples;
    }

    @Nullable
    /* renamed from: component76, reason: from getter */
    public final Boolean getStopSessionOnSensorError() {
        return this.stopSessionOnSensorError;
    }

    @Nullable
    /* renamed from: component77, reason: from getter */
    public final Boolean getStopSessionIfSensorDataOutdated() {
        return this.stopSessionIfSensorDataOutdated;
    }

    @Nullable
    /* renamed from: component78, reason: from getter */
    public final Double getSensorIssuesELogIntervalSec() {
        return this.sensorIssuesELogIntervalSec;
    }

    @Nullable
    /* renamed from: component79, reason: from getter */
    public final SensorsConfigResponse getSensorsConfig() {
        return this.sensorsConfig;
    }

    @Nullable
    /* renamed from: component8, reason: from getter */
    public final Integer getRestConnectTimeoutSec() {
        return this.restConnectTimeoutSec;
    }

    @Nullable
    /* renamed from: component80, reason: from getter */
    public final Boolean getShouldNeverStopPressure() {
        return this.shouldNeverStopPressure;
    }

    @Nullable
    /* renamed from: component81, reason: from getter */
    public final EngineConfigResponse getEngine() {
        return this.engine;
    }

    @Nullable
    /* renamed from: component82, reason: from getter */
    public final String getMapGridFetchingStrategy() {
        return this.mapGridFetchingStrategy;
    }

    @Nullable
    /* renamed from: component83, reason: from getter */
    public final String getMapGridType() {
        return this.mapGridType;
    }

    @Nullable
    /* renamed from: component84, reason: from getter */
    public final Double getMapGridUrlExpirationTimeMinutes() {
        return this.mapGridUrlExpirationTimeMinutes;
    }

    @Nullable
    /* renamed from: component85, reason: from getter */
    public final NavigationConfigResponse getNavigationEngine() {
        return this.navigationEngine;
    }

    @Nullable
    /* renamed from: component86, reason: from getter */
    public final Boolean getIsDebugDataManagerEnabled() {
        return this.isDebugDataManagerEnabled;
    }

    @Nullable
    /* renamed from: component87, reason: from getter */
    public final AuthConfigResponse getAuth() {
        return this.auth;
    }

    @Nullable
    /* renamed from: component88, reason: from getter */
    public final GeofenceConfigResponse getGeofence() {
        return this.geofence;
    }

    @Nullable
    /* renamed from: component89, reason: from getter */
    public final PositioningConfigResponse getPositioning() {
        return this.positioning;
    }

    @Nullable
    /* renamed from: component9, reason: from getter */
    public final Integer getMaxSessionLengthMin() {
        return this.maxSessionLengthMin;
    }

    @Nullable
    /* renamed from: component90, reason: from getter */
    public final TurnByTurnConfigResponse getTurnByTurn() {
        return this.turnByTurn;
    }

    @Nullable
    /* renamed from: component91, reason: from getter */
    public final ProximityConfigResponse getProximity() {
        return this.proximity;
    }

    @Nullable
    /* renamed from: component92, reason: from getter */
    public final SnappingConfigResponse getSnapping() {
        return this.snapping;
    }

    @Nullable
    /* renamed from: component93, reason: from getter */
    public final PlaiConfigResponse getPlai() {
        return this.plai;
    }

    @NotNull
    public final RemoteConfigResponse copy(@Nullable Boolean shouldUseElog, @Nullable Integer elogLevel, @Nullable Integer metricsLevel, @Nullable String elogUrl, @Nullable Integer eLogQueueSize, @Nullable Integer eLogReportAttemptsLimit, @Nullable Integer restReadTimeoutSec, @Nullable Integer restConnectTimeoutSec, @Nullable Integer maxSessionLengthMin, @Nullable Integer geoAcceptedAccuracyMeters, @Nullable Integer elogLevelSendingBatchSize, @Nullable Integer elogLevelSendingIntervalSeconds, @Nullable Double foregroundServiceMonitoringIntervalSec, @Nullable Boolean useFusedLocationProvider, @Nullable Boolean considerGeofenceAlwaysInside, @Nullable Boolean enablePeriodicCacheRefreshing, @Nullable Double periodicCacheRefreshingTimeHours, @Nullable Float minDistanceToRecalculateNavRouteMeters, @Nullable Float calibrationNeededCheckIntervalMinutes, @Nullable Float defaultBuildingsFetchRadius, @Nullable Float nearbyBuildingsSearchRadiusMeters, @Nullable Boolean requiredCalibrationOnFailedCheck, @Nullable Boolean shouldUseTailTrimming, @Nullable Float tailTrimming_maxPositionJumpMeters, @Nullable Float tailTrimming_AcceptableDistanceToRouteSegmentMeters, @Nullable Float tailTrimming_RouteSegmentLengthMeters, @Nullable Float tailTrimming_DistanceShrinkingRation, @Nullable Float tailTrimming_RouteRecalculationDistanceMeters, @Nullable Boolean tailTrimming_AllowFirstWaypointTrimming, @Nullable Float tailTrimming_FirstWaypointTrimmingMaxDistance, @Nullable Float secondsToIndicateLimitedConnection, @Nullable Integer recoveryAttemptsLimit, @Nullable Float recoveryAttemptIntervalSec, @Nullable Boolean allowNoBarometerPositioningInMultifloor, @Nullable Integer startPositioningRetryCount, @Nullable Float startPositioningRetryIntervalSec, @Nullable Integer dataLoadingRetryRequestCount, @Nullable Integer inMemoryStorageLimit, @Nullable Integer maxConcurrentDownloadTasks, @Nullable Integer inMemoryStorageCleanUpLimit, @Nullable Double mapDataExpirationTimeMinutes, @Nullable Boolean isMapImagesPreloadingEnabled, @Nullable Double engineSessionFetchRetryInterval, @Nullable Integer engineSessionFetchRetryCount, @Nullable Double configFetchRetryInterval, @Nullable Integer configFetchRetryCount, @Nullable Integer startReportingRetryCount, @Nullable Double startReportingRetryInterval, @Nullable Boolean allowClearAllCaches, @Nullable Double dontClearUploadManagerCacheLastDays, @Nullable Double dontClearAllELogsLastMinutes, @Nullable Integer eventTagsMaxRetryCount, @Nullable Double eventTagsRetryIntervalSeconds, @Nullable Integer eventTagsMaxTagsPerRetry, @Nullable Boolean eventTagsCachingEnabled, @Nullable Double deviceDataFetchTimeoutSeconds, @Nullable Boolean isAutoCalibCheckPeriodicallyEnable, @Nullable Double autoCalibCheckTimeIntervalSec, @Nullable Double additionalPercentageToEnterGeofence, @Nullable Integer maxLiveNavigationRetryAttempts, @Nullable Integer maxProximityDataRetryAttempts, @Nullable Boolean enableAutomaticPositioningDataPreloading, @Nullable Double dataExpirationTimeDays, @Nullable Long appSessionMaxInactivitySec, @Nullable Boolean isSilentModeEnabled, @Nullable Double sensorSamplingRateHz, @Nullable Integer sensorsDataBufferSize, @Nullable Double freezeSensorsDataRelevanceLimitSec, @Nullable Double freezeSensorsDataRelevanceLimitPressureSec, @Nullable Double freezeMonitoringIntervalSec, @Nullable Double freezeRecoveryWaitingDurationSec, @Nullable Double freezeRestartWaitingDurationSec, @Nullable Boolean useNewSensorManager, @Nullable Boolean monitorFreezes, @Nullable Boolean validateSamples, @Nullable Boolean stopSessionOnSensorError, @Nullable Boolean stopSessionIfSensorDataOutdated, @Nullable Double sensorIssuesELogIntervalSec, @Nullable SensorsConfigResponse sensorsConfig, @Nullable Boolean shouldNeverStopPressure, @Nullable EngineConfigResponse engine, @Nullable String mapGridFetchingStrategy, @Nullable String mapGridType, @Nullable Double mapGridUrlExpirationTimeMinutes, @Nullable NavigationConfigResponse navigationEngine, @Nullable Boolean isDebugDataManagerEnabled, @Nullable AuthConfigResponse auth, @Nullable GeofenceConfigResponse geofence, @Nullable PositioningConfigResponse positioning, @Nullable TurnByTurnConfigResponse turnByTurn, @Nullable ProximityConfigResponse proximity, @Nullable SnappingConfigResponse snapping, @Nullable PlaiConfigResponse plai) {
        return new RemoteConfigResponse(shouldUseElog, elogLevel, metricsLevel, elogUrl, eLogQueueSize, eLogReportAttemptsLimit, restReadTimeoutSec, restConnectTimeoutSec, maxSessionLengthMin, geoAcceptedAccuracyMeters, elogLevelSendingBatchSize, elogLevelSendingIntervalSeconds, foregroundServiceMonitoringIntervalSec, useFusedLocationProvider, considerGeofenceAlwaysInside, enablePeriodicCacheRefreshing, periodicCacheRefreshingTimeHours, minDistanceToRecalculateNavRouteMeters, calibrationNeededCheckIntervalMinutes, defaultBuildingsFetchRadius, nearbyBuildingsSearchRadiusMeters, requiredCalibrationOnFailedCheck, shouldUseTailTrimming, tailTrimming_maxPositionJumpMeters, tailTrimming_AcceptableDistanceToRouteSegmentMeters, tailTrimming_RouteSegmentLengthMeters, tailTrimming_DistanceShrinkingRation, tailTrimming_RouteRecalculationDistanceMeters, tailTrimming_AllowFirstWaypointTrimming, tailTrimming_FirstWaypointTrimmingMaxDistance, secondsToIndicateLimitedConnection, recoveryAttemptsLimit, recoveryAttemptIntervalSec, allowNoBarometerPositioningInMultifloor, startPositioningRetryCount, startPositioningRetryIntervalSec, dataLoadingRetryRequestCount, inMemoryStorageLimit, maxConcurrentDownloadTasks, inMemoryStorageCleanUpLimit, mapDataExpirationTimeMinutes, isMapImagesPreloadingEnabled, engineSessionFetchRetryInterval, engineSessionFetchRetryCount, configFetchRetryInterval, configFetchRetryCount, startReportingRetryCount, startReportingRetryInterval, allowClearAllCaches, dontClearUploadManagerCacheLastDays, dontClearAllELogsLastMinutes, eventTagsMaxRetryCount, eventTagsRetryIntervalSeconds, eventTagsMaxTagsPerRetry, eventTagsCachingEnabled, deviceDataFetchTimeoutSeconds, isAutoCalibCheckPeriodicallyEnable, autoCalibCheckTimeIntervalSec, additionalPercentageToEnterGeofence, maxLiveNavigationRetryAttempts, maxProximityDataRetryAttempts, enableAutomaticPositioningDataPreloading, dataExpirationTimeDays, appSessionMaxInactivitySec, isSilentModeEnabled, sensorSamplingRateHz, sensorsDataBufferSize, freezeSensorsDataRelevanceLimitSec, freezeSensorsDataRelevanceLimitPressureSec, freezeMonitoringIntervalSec, freezeRecoveryWaitingDurationSec, freezeRestartWaitingDurationSec, useNewSensorManager, monitorFreezes, validateSamples, stopSessionOnSensorError, stopSessionIfSensorDataOutdated, sensorIssuesELogIntervalSec, sensorsConfig, shouldNeverStopPressure, engine, mapGridFetchingStrategy, mapGridType, mapGridUrlExpirationTimeMinutes, navigationEngine, isDebugDataManagerEnabled, auth, geofence, positioning, turnByTurn, proximity, snapping, plai);
    }

    public boolean equals(@Nullable Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof RemoteConfigResponse)) {
            return false;
        }
        RemoteConfigResponse remoteConfigResponse = (RemoteConfigResponse) other;
        return Intrinsics.c(this.shouldUseElog, remoteConfigResponse.shouldUseElog) && Intrinsics.c(this.elogLevel, remoteConfigResponse.elogLevel) && Intrinsics.c(this.metricsLevel, remoteConfigResponse.metricsLevel) && Intrinsics.c(this.elogUrl, remoteConfigResponse.elogUrl) && Intrinsics.c(this.eLogQueueSize, remoteConfigResponse.eLogQueueSize) && Intrinsics.c(this.eLogReportAttemptsLimit, remoteConfigResponse.eLogReportAttemptsLimit) && Intrinsics.c(this.restReadTimeoutSec, remoteConfigResponse.restReadTimeoutSec) && Intrinsics.c(this.restConnectTimeoutSec, remoteConfigResponse.restConnectTimeoutSec) && Intrinsics.c(this.maxSessionLengthMin, remoteConfigResponse.maxSessionLengthMin) && Intrinsics.c(this.geoAcceptedAccuracyMeters, remoteConfigResponse.geoAcceptedAccuracyMeters) && Intrinsics.c(this.elogLevelSendingBatchSize, remoteConfigResponse.elogLevelSendingBatchSize) && Intrinsics.c(this.elogLevelSendingIntervalSeconds, remoteConfigResponse.elogLevelSendingIntervalSeconds) && Intrinsics.c(this.foregroundServiceMonitoringIntervalSec, remoteConfigResponse.foregroundServiceMonitoringIntervalSec) && Intrinsics.c(this.useFusedLocationProvider, remoteConfigResponse.useFusedLocationProvider) && Intrinsics.c(this.considerGeofenceAlwaysInside, remoteConfigResponse.considerGeofenceAlwaysInside) && Intrinsics.c(this.enablePeriodicCacheRefreshing, remoteConfigResponse.enablePeriodicCacheRefreshing) && Intrinsics.c(this.periodicCacheRefreshingTimeHours, remoteConfigResponse.periodicCacheRefreshingTimeHours) && Intrinsics.c(this.minDistanceToRecalculateNavRouteMeters, remoteConfigResponse.minDistanceToRecalculateNavRouteMeters) && Intrinsics.c(this.calibrationNeededCheckIntervalMinutes, remoteConfigResponse.calibrationNeededCheckIntervalMinutes) && Intrinsics.c(this.defaultBuildingsFetchRadius, remoteConfigResponse.defaultBuildingsFetchRadius) && Intrinsics.c(this.nearbyBuildingsSearchRadiusMeters, remoteConfigResponse.nearbyBuildingsSearchRadiusMeters) && Intrinsics.c(this.requiredCalibrationOnFailedCheck, remoteConfigResponse.requiredCalibrationOnFailedCheck) && Intrinsics.c(this.shouldUseTailTrimming, remoteConfigResponse.shouldUseTailTrimming) && Intrinsics.c(this.tailTrimming_maxPositionJumpMeters, remoteConfigResponse.tailTrimming_maxPositionJumpMeters) && Intrinsics.c(this.tailTrimming_AcceptableDistanceToRouteSegmentMeters, remoteConfigResponse.tailTrimming_AcceptableDistanceToRouteSegmentMeters) && Intrinsics.c(this.tailTrimming_RouteSegmentLengthMeters, remoteConfigResponse.tailTrimming_RouteSegmentLengthMeters) && Intrinsics.c(this.tailTrimming_DistanceShrinkingRation, remoteConfigResponse.tailTrimming_DistanceShrinkingRation) && Intrinsics.c(this.tailTrimming_RouteRecalculationDistanceMeters, remoteConfigResponse.tailTrimming_RouteRecalculationDistanceMeters) && Intrinsics.c(this.tailTrimming_AllowFirstWaypointTrimming, remoteConfigResponse.tailTrimming_AllowFirstWaypointTrimming) && Intrinsics.c(this.tailTrimming_FirstWaypointTrimmingMaxDistance, remoteConfigResponse.tailTrimming_FirstWaypointTrimmingMaxDistance) && Intrinsics.c(this.secondsToIndicateLimitedConnection, remoteConfigResponse.secondsToIndicateLimitedConnection) && Intrinsics.c(this.recoveryAttemptsLimit, remoteConfigResponse.recoveryAttemptsLimit) && Intrinsics.c(this.recoveryAttemptIntervalSec, remoteConfigResponse.recoveryAttemptIntervalSec) && Intrinsics.c(this.allowNoBarometerPositioningInMultifloor, remoteConfigResponse.allowNoBarometerPositioningInMultifloor) && Intrinsics.c(this.startPositioningRetryCount, remoteConfigResponse.startPositioningRetryCount) && Intrinsics.c(this.startPositioningRetryIntervalSec, remoteConfigResponse.startPositioningRetryIntervalSec) && Intrinsics.c(this.dataLoadingRetryRequestCount, remoteConfigResponse.dataLoadingRetryRequestCount) && Intrinsics.c(this.inMemoryStorageLimit, remoteConfigResponse.inMemoryStorageLimit) && Intrinsics.c(this.maxConcurrentDownloadTasks, remoteConfigResponse.maxConcurrentDownloadTasks) && Intrinsics.c(this.inMemoryStorageCleanUpLimit, remoteConfigResponse.inMemoryStorageCleanUpLimit) && Intrinsics.c(this.mapDataExpirationTimeMinutes, remoteConfigResponse.mapDataExpirationTimeMinutes) && Intrinsics.c(this.isMapImagesPreloadingEnabled, remoteConfigResponse.isMapImagesPreloadingEnabled) && Intrinsics.c(this.engineSessionFetchRetryInterval, remoteConfigResponse.engineSessionFetchRetryInterval) && Intrinsics.c(this.engineSessionFetchRetryCount, remoteConfigResponse.engineSessionFetchRetryCount) && Intrinsics.c(this.configFetchRetryInterval, remoteConfigResponse.configFetchRetryInterval) && Intrinsics.c(this.configFetchRetryCount, remoteConfigResponse.configFetchRetryCount) && Intrinsics.c(this.startReportingRetryCount, remoteConfigResponse.startReportingRetryCount) && Intrinsics.c(this.startReportingRetryInterval, remoteConfigResponse.startReportingRetryInterval) && Intrinsics.c(this.allowClearAllCaches, remoteConfigResponse.allowClearAllCaches) && Intrinsics.c(this.dontClearUploadManagerCacheLastDays, remoteConfigResponse.dontClearUploadManagerCacheLastDays) && Intrinsics.c(this.dontClearAllELogsLastMinutes, remoteConfigResponse.dontClearAllELogsLastMinutes) && Intrinsics.c(this.eventTagsMaxRetryCount, remoteConfigResponse.eventTagsMaxRetryCount) && Intrinsics.c(this.eventTagsRetryIntervalSeconds, remoteConfigResponse.eventTagsRetryIntervalSeconds) && Intrinsics.c(this.eventTagsMaxTagsPerRetry, remoteConfigResponse.eventTagsMaxTagsPerRetry) && Intrinsics.c(this.eventTagsCachingEnabled, remoteConfigResponse.eventTagsCachingEnabled) && Intrinsics.c(this.deviceDataFetchTimeoutSeconds, remoteConfigResponse.deviceDataFetchTimeoutSeconds) && Intrinsics.c(this.isAutoCalibCheckPeriodicallyEnable, remoteConfigResponse.isAutoCalibCheckPeriodicallyEnable) && Intrinsics.c(this.autoCalibCheckTimeIntervalSec, remoteConfigResponse.autoCalibCheckTimeIntervalSec) && Intrinsics.c(this.additionalPercentageToEnterGeofence, remoteConfigResponse.additionalPercentageToEnterGeofence) && Intrinsics.c(this.maxLiveNavigationRetryAttempts, remoteConfigResponse.maxLiveNavigationRetryAttempts) && Intrinsics.c(this.maxProximityDataRetryAttempts, remoteConfigResponse.maxProximityDataRetryAttempts) && Intrinsics.c(this.enableAutomaticPositioningDataPreloading, remoteConfigResponse.enableAutomaticPositioningDataPreloading) && Intrinsics.c(this.dataExpirationTimeDays, remoteConfigResponse.dataExpirationTimeDays) && Intrinsics.c(this.appSessionMaxInactivitySec, remoteConfigResponse.appSessionMaxInactivitySec) && Intrinsics.c(this.isSilentModeEnabled, remoteConfigResponse.isSilentModeEnabled) && Intrinsics.c(this.sensorSamplingRateHz, remoteConfigResponse.sensorSamplingRateHz) && Intrinsics.c(this.sensorsDataBufferSize, remoteConfigResponse.sensorsDataBufferSize) && Intrinsics.c(this.freezeSensorsDataRelevanceLimitSec, remoteConfigResponse.freezeSensorsDataRelevanceLimitSec) && Intrinsics.c(this.freezeSensorsDataRelevanceLimitPressureSec, remoteConfigResponse.freezeSensorsDataRelevanceLimitPressureSec) && Intrinsics.c(this.freezeMonitoringIntervalSec, remoteConfigResponse.freezeMonitoringIntervalSec) && Intrinsics.c(this.freezeRecoveryWaitingDurationSec, remoteConfigResponse.freezeRecoveryWaitingDurationSec) && Intrinsics.c(this.freezeRestartWaitingDurationSec, remoteConfigResponse.freezeRestartWaitingDurationSec) && Intrinsics.c(this.useNewSensorManager, remoteConfigResponse.useNewSensorManager) && Intrinsics.c(this.monitorFreezes, remoteConfigResponse.monitorFreezes) && Intrinsics.c(this.validateSamples, remoteConfigResponse.validateSamples) && Intrinsics.c(this.stopSessionOnSensorError, remoteConfigResponse.stopSessionOnSensorError) && Intrinsics.c(this.stopSessionIfSensorDataOutdated, remoteConfigResponse.stopSessionIfSensorDataOutdated) && Intrinsics.c(this.sensorIssuesELogIntervalSec, remoteConfigResponse.sensorIssuesELogIntervalSec) && Intrinsics.c(this.sensorsConfig, remoteConfigResponse.sensorsConfig) && Intrinsics.c(this.shouldNeverStopPressure, remoteConfigResponse.shouldNeverStopPressure) && Intrinsics.c(this.engine, remoteConfigResponse.engine) && Intrinsics.c(this.mapGridFetchingStrategy, remoteConfigResponse.mapGridFetchingStrategy) && Intrinsics.c(this.mapGridType, remoteConfigResponse.mapGridType) && Intrinsics.c(this.mapGridUrlExpirationTimeMinutes, remoteConfigResponse.mapGridUrlExpirationTimeMinutes) && Intrinsics.c(this.navigationEngine, remoteConfigResponse.navigationEngine) && Intrinsics.c(this.isDebugDataManagerEnabled, remoteConfigResponse.isDebugDataManagerEnabled) && Intrinsics.c(this.auth, remoteConfigResponse.auth) && Intrinsics.c(this.geofence, remoteConfigResponse.geofence) && Intrinsics.c(this.positioning, remoteConfigResponse.positioning) && Intrinsics.c(this.turnByTurn, remoteConfigResponse.turnByTurn) && Intrinsics.c(this.proximity, remoteConfigResponse.proximity) && Intrinsics.c(this.snapping, remoteConfigResponse.snapping) && Intrinsics.c(this.plai, remoteConfigResponse.plai);
    }

    @Nullable
    public final Double getAdditionalPercentageToEnterGeofence() {
        return this.additionalPercentageToEnterGeofence;
    }

    @Nullable
    public final Boolean getAllowClearAllCaches() {
        return this.allowClearAllCaches;
    }

    @Nullable
    public final Boolean getAllowNoBarometerPositioningInMultifloor() {
        return this.allowNoBarometerPositioningInMultifloor;
    }

    @Nullable
    public final Long getAppSessionMaxInactivitySec() {
        return this.appSessionMaxInactivitySec;
    }

    @Nullable
    public final AuthConfigResponse getAuth() {
        return this.auth;
    }

    @Nullable
    public final Double getAutoCalibCheckTimeIntervalSec() {
        return this.autoCalibCheckTimeIntervalSec;
    }

    @Nullable
    public final Float getCalibrationNeededCheckIntervalMinutes() {
        return this.calibrationNeededCheckIntervalMinutes;
    }

    @Nullable
    public final Integer getConfigFetchRetryCount() {
        return this.configFetchRetryCount;
    }

    @Nullable
    public final Double getConfigFetchRetryInterval() {
        return this.configFetchRetryInterval;
    }

    @Nullable
    public final Boolean getConsiderGeofenceAlwaysInside() {
        return this.considerGeofenceAlwaysInside;
    }

    @Nullable
    public final Double getDataExpirationTimeDays() {
        return this.dataExpirationTimeDays;
    }

    @Nullable
    public final Integer getDataLoadingRetryRequestCount() {
        return this.dataLoadingRetryRequestCount;
    }

    @Nullable
    public final Float getDefaultBuildingsFetchRadius() {
        return this.defaultBuildingsFetchRadius;
    }

    @Nullable
    public final Double getDeviceDataFetchTimeoutSeconds() {
        return this.deviceDataFetchTimeoutSeconds;
    }

    @Nullable
    public final Double getDontClearAllELogsLastMinutes() {
        return this.dontClearAllELogsLastMinutes;
    }

    @Nullable
    public final Double getDontClearUploadManagerCacheLastDays() {
        return this.dontClearUploadManagerCacheLastDays;
    }

    @Nullable
    public final Integer getELogQueueSize() {
        return this.eLogQueueSize;
    }

    @Nullable
    public final Integer getELogReportAttemptsLimit() {
        return this.eLogReportAttemptsLimit;
    }

    @Nullable
    public final Integer getElogLevel() {
        return this.elogLevel;
    }

    @Nullable
    public final Integer getElogLevelSendingBatchSize() {
        return this.elogLevelSendingBatchSize;
    }

    @Nullable
    public final Integer getElogLevelSendingIntervalSeconds() {
        return this.elogLevelSendingIntervalSeconds;
    }

    @Nullable
    public final String getElogUrl() {
        return this.elogUrl;
    }

    @Nullable
    public final Boolean getEnableAutomaticPositioningDataPreloading() {
        return this.enableAutomaticPositioningDataPreloading;
    }

    @Nullable
    public final Boolean getEnablePeriodicCacheRefreshing() {
        return this.enablePeriodicCacheRefreshing;
    }

    @Nullable
    public final EngineConfigResponse getEngine() {
        return this.engine;
    }

    @Nullable
    public final Integer getEngineSessionFetchRetryCount() {
        return this.engineSessionFetchRetryCount;
    }

    @Nullable
    public final Double getEngineSessionFetchRetryInterval() {
        return this.engineSessionFetchRetryInterval;
    }

    @Nullable
    public final Boolean getEventTagsCachingEnabled() {
        return this.eventTagsCachingEnabled;
    }

    @Nullable
    public final Integer getEventTagsMaxRetryCount() {
        return this.eventTagsMaxRetryCount;
    }

    @Nullable
    public final Integer getEventTagsMaxTagsPerRetry() {
        return this.eventTagsMaxTagsPerRetry;
    }

    @Nullable
    public final Double getEventTagsRetryIntervalSeconds() {
        return this.eventTagsRetryIntervalSeconds;
    }

    @Nullable
    public final Double getForegroundServiceMonitoringIntervalSec() {
        return this.foregroundServiceMonitoringIntervalSec;
    }

    @Nullable
    public final Double getFreezeMonitoringIntervalSec() {
        return this.freezeMonitoringIntervalSec;
    }

    @Nullable
    public final Double getFreezeRecoveryWaitingDurationSec() {
        return this.freezeRecoveryWaitingDurationSec;
    }

    @Nullable
    public final Double getFreezeRestartWaitingDurationSec() {
        return this.freezeRestartWaitingDurationSec;
    }

    @Nullable
    public final Double getFreezeSensorsDataRelevanceLimitPressureSec() {
        return this.freezeSensorsDataRelevanceLimitPressureSec;
    }

    @Nullable
    public final Double getFreezeSensorsDataRelevanceLimitSec() {
        return this.freezeSensorsDataRelevanceLimitSec;
    }

    @Nullable
    public final Integer getGeoAcceptedAccuracyMeters() {
        return this.geoAcceptedAccuracyMeters;
    }

    @Nullable
    public final GeofenceConfigResponse getGeofence() {
        return this.geofence;
    }

    @Nullable
    public final Integer getInMemoryStorageCleanUpLimit() {
        return this.inMemoryStorageCleanUpLimit;
    }

    @Nullable
    public final Integer getInMemoryStorageLimit() {
        return this.inMemoryStorageLimit;
    }

    @Nullable
    public final Double getMapDataExpirationTimeMinutes() {
        return this.mapDataExpirationTimeMinutes;
    }

    @Nullable
    public final String getMapGridFetchingStrategy() {
        return this.mapGridFetchingStrategy;
    }

    @Nullable
    public final String getMapGridType() {
        return this.mapGridType;
    }

    @Nullable
    public final Double getMapGridUrlExpirationTimeMinutes() {
        return this.mapGridUrlExpirationTimeMinutes;
    }

    @Nullable
    public final Integer getMaxConcurrentDownloadTasks() {
        return this.maxConcurrentDownloadTasks;
    }

    @Nullable
    public final Integer getMaxLiveNavigationRetryAttempts() {
        return this.maxLiveNavigationRetryAttempts;
    }

    @Nullable
    public final Integer getMaxProximityDataRetryAttempts() {
        return this.maxProximityDataRetryAttempts;
    }

    @Nullable
    public final Integer getMaxSessionLengthMin() {
        return this.maxSessionLengthMin;
    }

    @Nullable
    public final Integer getMetricsLevel() {
        return this.metricsLevel;
    }

    @Nullable
    public final Float getMinDistanceToRecalculateNavRouteMeters() {
        return this.minDistanceToRecalculateNavRouteMeters;
    }

    @Nullable
    public final Boolean getMonitorFreezes() {
        return this.monitorFreezes;
    }

    @Nullable
    public final NavigationConfigResponse getNavigationEngine() {
        return this.navigationEngine;
    }

    @Nullable
    public final Float getNearbyBuildingsSearchRadiusMeters() {
        return this.nearbyBuildingsSearchRadiusMeters;
    }

    @Nullable
    public final Double getPeriodicCacheRefreshingTimeHours() {
        return this.periodicCacheRefreshingTimeHours;
    }

    @Nullable
    public final PlaiConfigResponse getPlai() {
        return this.plai;
    }

    @Nullable
    public final PositioningConfigResponse getPositioning() {
        return this.positioning;
    }

    @Nullable
    public final ProximityConfigResponse getProximity() {
        return this.proximity;
    }

    @Nullable
    public final Float getRecoveryAttemptIntervalSec() {
        return this.recoveryAttemptIntervalSec;
    }

    @Nullable
    public final Integer getRecoveryAttemptsLimit() {
        return this.recoveryAttemptsLimit;
    }

    @Nullable
    public final Boolean getRequiredCalibrationOnFailedCheck() {
        return this.requiredCalibrationOnFailedCheck;
    }

    @Nullable
    public final Integer getRestConnectTimeoutSec() {
        return this.restConnectTimeoutSec;
    }

    @Nullable
    public final Integer getRestReadTimeoutSec() {
        return this.restReadTimeoutSec;
    }

    @Nullable
    public final Float getSecondsToIndicateLimitedConnection() {
        return this.secondsToIndicateLimitedConnection;
    }

    @Nullable
    public final Double getSensorIssuesELogIntervalSec() {
        return this.sensorIssuesELogIntervalSec;
    }

    @Nullable
    public final Double getSensorSamplingRateHz() {
        return this.sensorSamplingRateHz;
    }

    @Nullable
    public final SensorsConfigResponse getSensorsConfig() {
        return this.sensorsConfig;
    }

    @Nullable
    public final Integer getSensorsDataBufferSize() {
        return this.sensorsDataBufferSize;
    }

    @Nullable
    public final Boolean getShouldNeverStopPressure() {
        return this.shouldNeverStopPressure;
    }

    @Nullable
    public final Boolean getShouldUseElog() {
        return this.shouldUseElog;
    }

    @Nullable
    public final Boolean getShouldUseTailTrimming() {
        return this.shouldUseTailTrimming;
    }

    @Nullable
    public final SnappingConfigResponse getSnapping() {
        return this.snapping;
    }

    @Nullable
    public final Integer getStartPositioningRetryCount() {
        return this.startPositioningRetryCount;
    }

    @Nullable
    public final Float getStartPositioningRetryIntervalSec() {
        return this.startPositioningRetryIntervalSec;
    }

    @Nullable
    public final Integer getStartReportingRetryCount() {
        return this.startReportingRetryCount;
    }

    @Nullable
    public final Double getStartReportingRetryInterval() {
        return this.startReportingRetryInterval;
    }

    @Nullable
    public final Boolean getStopSessionIfSensorDataOutdated() {
        return this.stopSessionIfSensorDataOutdated;
    }

    @Nullable
    public final Boolean getStopSessionOnSensorError() {
        return this.stopSessionOnSensorError;
    }

    @Nullable
    public final Float getTailTrimming_AcceptableDistanceToRouteSegmentMeters() {
        return this.tailTrimming_AcceptableDistanceToRouteSegmentMeters;
    }

    @Nullable
    public final Boolean getTailTrimming_AllowFirstWaypointTrimming() {
        return this.tailTrimming_AllowFirstWaypointTrimming;
    }

    @Nullable
    public final Float getTailTrimming_DistanceShrinkingRation() {
        return this.tailTrimming_DistanceShrinkingRation;
    }

    @Nullable
    public final Float getTailTrimming_FirstWaypointTrimmingMaxDistance() {
        return this.tailTrimming_FirstWaypointTrimmingMaxDistance;
    }

    @Nullable
    public final Float getTailTrimming_RouteRecalculationDistanceMeters() {
        return this.tailTrimming_RouteRecalculationDistanceMeters;
    }

    @Nullable
    public final Float getTailTrimming_RouteSegmentLengthMeters() {
        return this.tailTrimming_RouteSegmentLengthMeters;
    }

    @Nullable
    public final Float getTailTrimming_maxPositionJumpMeters() {
        return this.tailTrimming_maxPositionJumpMeters;
    }

    @Nullable
    public final TurnByTurnConfigResponse getTurnByTurn() {
        return this.turnByTurn;
    }

    @Nullable
    public final Boolean getUseFusedLocationProvider() {
        return this.useFusedLocationProvider;
    }

    @Nullable
    public final Boolean getUseNewSensorManager() {
        return this.useNewSensorManager;
    }

    @Nullable
    public final Boolean getValidateSamples() {
        return this.validateSamples;
    }

    public int hashCode() {
        Boolean bool = this.shouldUseElog;
        int iHashCode = (bool == null ? 0 : bool.hashCode()) * 31;
        Integer num = this.elogLevel;
        int iHashCode2 = (iHashCode + (num == null ? 0 : num.hashCode())) * 31;
        Integer num2 = this.metricsLevel;
        int iHashCode3 = (iHashCode2 + (num2 == null ? 0 : num2.hashCode())) * 31;
        String str = this.elogUrl;
        int iHashCode4 = (iHashCode3 + (str == null ? 0 : str.hashCode())) * 31;
        Integer num3 = this.eLogQueueSize;
        int iHashCode5 = (iHashCode4 + (num3 == null ? 0 : num3.hashCode())) * 31;
        Integer num4 = this.eLogReportAttemptsLimit;
        int iHashCode6 = (iHashCode5 + (num4 == null ? 0 : num4.hashCode())) * 31;
        Integer num5 = this.restReadTimeoutSec;
        int iHashCode7 = (iHashCode6 + (num5 == null ? 0 : num5.hashCode())) * 31;
        Integer num6 = this.restConnectTimeoutSec;
        int iHashCode8 = (iHashCode7 + (num6 == null ? 0 : num6.hashCode())) * 31;
        Integer num7 = this.maxSessionLengthMin;
        int iHashCode9 = (iHashCode8 + (num7 == null ? 0 : num7.hashCode())) * 31;
        Integer num8 = this.geoAcceptedAccuracyMeters;
        int iHashCode10 = (iHashCode9 + (num8 == null ? 0 : num8.hashCode())) * 31;
        Integer num9 = this.elogLevelSendingBatchSize;
        int iHashCode11 = (iHashCode10 + (num9 == null ? 0 : num9.hashCode())) * 31;
        Integer num10 = this.elogLevelSendingIntervalSeconds;
        int iHashCode12 = (iHashCode11 + (num10 == null ? 0 : num10.hashCode())) * 31;
        Double d = this.foregroundServiceMonitoringIntervalSec;
        int iHashCode13 = (iHashCode12 + (d == null ? 0 : d.hashCode())) * 31;
        Boolean bool2 = this.useFusedLocationProvider;
        int iHashCode14 = (iHashCode13 + (bool2 == null ? 0 : bool2.hashCode())) * 31;
        Boolean bool3 = this.considerGeofenceAlwaysInside;
        int iHashCode15 = (iHashCode14 + (bool3 == null ? 0 : bool3.hashCode())) * 31;
        Boolean bool4 = this.enablePeriodicCacheRefreshing;
        int iHashCode16 = (iHashCode15 + (bool4 == null ? 0 : bool4.hashCode())) * 31;
        Double d2 = this.periodicCacheRefreshingTimeHours;
        int iHashCode17 = (iHashCode16 + (d2 == null ? 0 : d2.hashCode())) * 31;
        Float f = this.minDistanceToRecalculateNavRouteMeters;
        int iHashCode18 = (iHashCode17 + (f == null ? 0 : f.hashCode())) * 31;
        Float f2 = this.calibrationNeededCheckIntervalMinutes;
        int iHashCode19 = (iHashCode18 + (f2 == null ? 0 : f2.hashCode())) * 31;
        Float f3 = this.defaultBuildingsFetchRadius;
        int iHashCode20 = (iHashCode19 + (f3 == null ? 0 : f3.hashCode())) * 31;
        Float f4 = this.nearbyBuildingsSearchRadiusMeters;
        int iHashCode21 = (iHashCode20 + (f4 == null ? 0 : f4.hashCode())) * 31;
        Boolean bool5 = this.requiredCalibrationOnFailedCheck;
        int iHashCode22 = (iHashCode21 + (bool5 == null ? 0 : bool5.hashCode())) * 31;
        Boolean bool6 = this.shouldUseTailTrimming;
        int iHashCode23 = (iHashCode22 + (bool6 == null ? 0 : bool6.hashCode())) * 31;
        Float f5 = this.tailTrimming_maxPositionJumpMeters;
        int iHashCode24 = (iHashCode23 + (f5 == null ? 0 : f5.hashCode())) * 31;
        Float f6 = this.tailTrimming_AcceptableDistanceToRouteSegmentMeters;
        int iHashCode25 = (iHashCode24 + (f6 == null ? 0 : f6.hashCode())) * 31;
        Float f7 = this.tailTrimming_RouteSegmentLengthMeters;
        int iHashCode26 = (iHashCode25 + (f7 == null ? 0 : f7.hashCode())) * 31;
        Float f8 = this.tailTrimming_DistanceShrinkingRation;
        int iHashCode27 = (iHashCode26 + (f8 == null ? 0 : f8.hashCode())) * 31;
        Float f9 = this.tailTrimming_RouteRecalculationDistanceMeters;
        int iHashCode28 = (iHashCode27 + (f9 == null ? 0 : f9.hashCode())) * 31;
        Boolean bool7 = this.tailTrimming_AllowFirstWaypointTrimming;
        int iHashCode29 = (iHashCode28 + (bool7 == null ? 0 : bool7.hashCode())) * 31;
        Float f10 = this.tailTrimming_FirstWaypointTrimmingMaxDistance;
        int iHashCode30 = (iHashCode29 + (f10 == null ? 0 : f10.hashCode())) * 31;
        Float f11 = this.secondsToIndicateLimitedConnection;
        int iHashCode31 = (iHashCode30 + (f11 == null ? 0 : f11.hashCode())) * 31;
        Integer num11 = this.recoveryAttemptsLimit;
        int iHashCode32 = (iHashCode31 + (num11 == null ? 0 : num11.hashCode())) * 31;
        Float f12 = this.recoveryAttemptIntervalSec;
        int iHashCode33 = (iHashCode32 + (f12 == null ? 0 : f12.hashCode())) * 31;
        Boolean bool8 = this.allowNoBarometerPositioningInMultifloor;
        int iHashCode34 = (iHashCode33 + (bool8 == null ? 0 : bool8.hashCode())) * 31;
        Integer num12 = this.startPositioningRetryCount;
        int iHashCode35 = (iHashCode34 + (num12 == null ? 0 : num12.hashCode())) * 31;
        Float f13 = this.startPositioningRetryIntervalSec;
        int iHashCode36 = (iHashCode35 + (f13 == null ? 0 : f13.hashCode())) * 31;
        Integer num13 = this.dataLoadingRetryRequestCount;
        int iHashCode37 = (iHashCode36 + (num13 == null ? 0 : num13.hashCode())) * 31;
        Integer num14 = this.inMemoryStorageLimit;
        int iHashCode38 = (iHashCode37 + (num14 == null ? 0 : num14.hashCode())) * 31;
        Integer num15 = this.maxConcurrentDownloadTasks;
        int iHashCode39 = (iHashCode38 + (num15 == null ? 0 : num15.hashCode())) * 31;
        Integer num16 = this.inMemoryStorageCleanUpLimit;
        int iHashCode40 = (iHashCode39 + (num16 == null ? 0 : num16.hashCode())) * 31;
        Double d3 = this.mapDataExpirationTimeMinutes;
        int iHashCode41 = (iHashCode40 + (d3 == null ? 0 : d3.hashCode())) * 31;
        Boolean bool9 = this.isMapImagesPreloadingEnabled;
        int iHashCode42 = (iHashCode41 + (bool9 == null ? 0 : bool9.hashCode())) * 31;
        Double d4 = this.engineSessionFetchRetryInterval;
        int iHashCode43 = (iHashCode42 + (d4 == null ? 0 : d4.hashCode())) * 31;
        Integer num17 = this.engineSessionFetchRetryCount;
        int iHashCode44 = (iHashCode43 + (num17 == null ? 0 : num17.hashCode())) * 31;
        Double d5 = this.configFetchRetryInterval;
        int iHashCode45 = (iHashCode44 + (d5 == null ? 0 : d5.hashCode())) * 31;
        Integer num18 = this.configFetchRetryCount;
        int iHashCode46 = (iHashCode45 + (num18 == null ? 0 : num18.hashCode())) * 31;
        Integer num19 = this.startReportingRetryCount;
        int iHashCode47 = (iHashCode46 + (num19 == null ? 0 : num19.hashCode())) * 31;
        Double d6 = this.startReportingRetryInterval;
        int iHashCode48 = (iHashCode47 + (d6 == null ? 0 : d6.hashCode())) * 31;
        Boolean bool10 = this.allowClearAllCaches;
        int iHashCode49 = (iHashCode48 + (bool10 == null ? 0 : bool10.hashCode())) * 31;
        Double d7 = this.dontClearUploadManagerCacheLastDays;
        int iHashCode50 = (iHashCode49 + (d7 == null ? 0 : d7.hashCode())) * 31;
        Double d8 = this.dontClearAllELogsLastMinutes;
        int iHashCode51 = (iHashCode50 + (d8 == null ? 0 : d8.hashCode())) * 31;
        Integer num20 = this.eventTagsMaxRetryCount;
        int iHashCode52 = (iHashCode51 + (num20 == null ? 0 : num20.hashCode())) * 31;
        Double d9 = this.eventTagsRetryIntervalSeconds;
        int iHashCode53 = (iHashCode52 + (d9 == null ? 0 : d9.hashCode())) * 31;
        Integer num21 = this.eventTagsMaxTagsPerRetry;
        int iHashCode54 = (iHashCode53 + (num21 == null ? 0 : num21.hashCode())) * 31;
        Boolean bool11 = this.eventTagsCachingEnabled;
        int iHashCode55 = (iHashCode54 + (bool11 == null ? 0 : bool11.hashCode())) * 31;
        Double d10 = this.deviceDataFetchTimeoutSeconds;
        int iHashCode56 = (iHashCode55 + (d10 == null ? 0 : d10.hashCode())) * 31;
        Boolean bool12 = this.isAutoCalibCheckPeriodicallyEnable;
        int iHashCode57 = (iHashCode56 + (bool12 == null ? 0 : bool12.hashCode())) * 31;
        Double d11 = this.autoCalibCheckTimeIntervalSec;
        int iHashCode58 = (iHashCode57 + (d11 == null ? 0 : d11.hashCode())) * 31;
        Double d12 = this.additionalPercentageToEnterGeofence;
        int iHashCode59 = (iHashCode58 + (d12 == null ? 0 : d12.hashCode())) * 31;
        Integer num22 = this.maxLiveNavigationRetryAttempts;
        int iHashCode60 = (iHashCode59 + (num22 == null ? 0 : num22.hashCode())) * 31;
        Integer num23 = this.maxProximityDataRetryAttempts;
        int iHashCode61 = (iHashCode60 + (num23 == null ? 0 : num23.hashCode())) * 31;
        Boolean bool13 = this.enableAutomaticPositioningDataPreloading;
        int iHashCode62 = (iHashCode61 + (bool13 == null ? 0 : bool13.hashCode())) * 31;
        Double d13 = this.dataExpirationTimeDays;
        int iHashCode63 = (iHashCode62 + (d13 == null ? 0 : d13.hashCode())) * 31;
        Long l = this.appSessionMaxInactivitySec;
        int iHashCode64 = (iHashCode63 + (l == null ? 0 : l.hashCode())) * 31;
        Boolean bool14 = this.isSilentModeEnabled;
        int iHashCode65 = (iHashCode64 + (bool14 == null ? 0 : bool14.hashCode())) * 31;
        Double d14 = this.sensorSamplingRateHz;
        int iHashCode66 = (iHashCode65 + (d14 == null ? 0 : d14.hashCode())) * 31;
        Integer num24 = this.sensorsDataBufferSize;
        int iHashCode67 = (iHashCode66 + (num24 == null ? 0 : num24.hashCode())) * 31;
        Double d15 = this.freezeSensorsDataRelevanceLimitSec;
        int iHashCode68 = (iHashCode67 + (d15 == null ? 0 : d15.hashCode())) * 31;
        Double d16 = this.freezeSensorsDataRelevanceLimitPressureSec;
        int iHashCode69 = (iHashCode68 + (d16 == null ? 0 : d16.hashCode())) * 31;
        Double d17 = this.freezeMonitoringIntervalSec;
        int iHashCode70 = (iHashCode69 + (d17 == null ? 0 : d17.hashCode())) * 31;
        Double d18 = this.freezeRecoveryWaitingDurationSec;
        int iHashCode71 = (iHashCode70 + (d18 == null ? 0 : d18.hashCode())) * 31;
        Double d19 = this.freezeRestartWaitingDurationSec;
        int iHashCode72 = (iHashCode71 + (d19 == null ? 0 : d19.hashCode())) * 31;
        Boolean bool15 = this.useNewSensorManager;
        int iHashCode73 = (iHashCode72 + (bool15 == null ? 0 : bool15.hashCode())) * 31;
        Boolean bool16 = this.monitorFreezes;
        int iHashCode74 = (iHashCode73 + (bool16 == null ? 0 : bool16.hashCode())) * 31;
        Boolean bool17 = this.validateSamples;
        int iHashCode75 = (iHashCode74 + (bool17 == null ? 0 : bool17.hashCode())) * 31;
        Boolean bool18 = this.stopSessionOnSensorError;
        int iHashCode76 = (iHashCode75 + (bool18 == null ? 0 : bool18.hashCode())) * 31;
        Boolean bool19 = this.stopSessionIfSensorDataOutdated;
        int iHashCode77 = (iHashCode76 + (bool19 == null ? 0 : bool19.hashCode())) * 31;
        Double d20 = this.sensorIssuesELogIntervalSec;
        int iHashCode78 = (iHashCode77 + (d20 == null ? 0 : d20.hashCode())) * 31;
        SensorsConfigResponse sensorsConfigResponse = this.sensorsConfig;
        int iHashCode79 = (iHashCode78 + (sensorsConfigResponse == null ? 0 : sensorsConfigResponse.hashCode())) * 31;
        Boolean bool20 = this.shouldNeverStopPressure;
        int iHashCode80 = (iHashCode79 + (bool20 == null ? 0 : bool20.hashCode())) * 31;
        EngineConfigResponse engineConfigResponse = this.engine;
        int iHashCode81 = (iHashCode80 + (engineConfigResponse == null ? 0 : engineConfigResponse.hashCode())) * 31;
        String str2 = this.mapGridFetchingStrategy;
        int iHashCode82 = (iHashCode81 + (str2 == null ? 0 : str2.hashCode())) * 31;
        String str3 = this.mapGridType;
        int iHashCode83 = (iHashCode82 + (str3 == null ? 0 : str3.hashCode())) * 31;
        Double d21 = this.mapGridUrlExpirationTimeMinutes;
        int iHashCode84 = (iHashCode83 + (d21 == null ? 0 : d21.hashCode())) * 31;
        NavigationConfigResponse navigationConfigResponse = this.navigationEngine;
        int iHashCode85 = (iHashCode84 + (navigationConfigResponse == null ? 0 : navigationConfigResponse.hashCode())) * 31;
        Boolean bool21 = this.isDebugDataManagerEnabled;
        int iHashCode86 = (iHashCode85 + (bool21 == null ? 0 : bool21.hashCode())) * 31;
        AuthConfigResponse authConfigResponse = this.auth;
        int iHashCode87 = (iHashCode86 + (authConfigResponse == null ? 0 : authConfigResponse.hashCode())) * 31;
        GeofenceConfigResponse geofenceConfigResponse = this.geofence;
        int iHashCode88 = (iHashCode87 + (geofenceConfigResponse == null ? 0 : geofenceConfigResponse.hashCode())) * 31;
        PositioningConfigResponse positioningConfigResponse = this.positioning;
        int iHashCode89 = (iHashCode88 + (positioningConfigResponse == null ? 0 : positioningConfigResponse.hashCode())) * 31;
        TurnByTurnConfigResponse turnByTurnConfigResponse = this.turnByTurn;
        int iHashCode90 = (iHashCode89 + (turnByTurnConfigResponse == null ? 0 : turnByTurnConfigResponse.hashCode())) * 31;
        ProximityConfigResponse proximityConfigResponse = this.proximity;
        int iHashCode91 = (iHashCode90 + (proximityConfigResponse == null ? 0 : proximityConfigResponse.hashCode())) * 31;
        SnappingConfigResponse snappingConfigResponse = this.snapping;
        int iHashCode92 = (iHashCode91 + (snappingConfigResponse == null ? 0 : snappingConfigResponse.hashCode())) * 31;
        PlaiConfigResponse plaiConfigResponse = this.plai;
        return iHashCode92 + (plaiConfigResponse != null ? plaiConfigResponse.hashCode() : 0);
    }

    @Nullable
    public final Boolean isAutoCalibCheckPeriodicallyEnable() {
        return this.isAutoCalibCheckPeriodicallyEnable;
    }

    @Nullable
    public final Boolean isDebugDataManagerEnabled() {
        return this.isDebugDataManagerEnabled;
    }

    @Nullable
    public final Boolean isMapImagesPreloadingEnabled() {
        return this.isMapImagesPreloadingEnabled;
    }

    @Nullable
    public final Boolean isSilentModeEnabled() {
        return this.isSilentModeEnabled;
    }

    @NotNull
    public final RemoteConfig toRemoteConfig() {
        int value;
        int value2;
        Double tooFarToSnapWarningDistanceMeters;
        Double snappingWhenConvertingMaxDistanceMeters;
        Boolean enableSnappingWhenConvertingCoordinates;
        AuthConfigResponse authConfigResponse = this.auth;
        if (authConfigResponse == null) {
            authConfigResponse = new AuthConfigResponse((Integer) null, (Double) null, (Double) null, (Integer) null, (Double) null, (Double) null, (Long) null, 127, (DefaultConstructorMarker) null);
        }
        AuthConfig authConfig = authConfigResponse.toAuthConfig();
        Boolean bool = this.shouldUseElog;
        boolean zBooleanValue = bool != null ? bool.booleanValue() : true;
        Integer num = this.elogLevel;
        if (num != null) {
            value = num.intValue();
        } else {
            value = (((BuildData) DependencyInjectionKt.getDi().get(Reflection.f24268a.b(BuildData.class))).getDebug() ? ELog.Level.VERBOSE : ELog.Level.INFO).getValue();
        }
        Integer num2 = this.metricsLevel;
        if (num2 != null) {
            value2 = num2.intValue();
        } else {
            value2 = (((BuildData) DependencyInjectionKt.getDi().get(Reflection.f24268a.b(BuildData.class))).getDebug() ? ELog.Level.VERBOSE : ELog.Level.INFO).getValue();
        }
        Integer num3 = this.eLogQueueSize;
        int iIntValue = num3 != null ? num3.intValue() : 2000;
        Integer num4 = this.eLogReportAttemptsLimit;
        int iIntValue2 = num4 != null ? num4.intValue() : 5;
        Integer num5 = this.elogLevelSendingBatchSize;
        int iIntValue3 = num5 != null ? num5.intValue() : 100;
        Integer num6 = this.elogLevelSendingIntervalSeconds;
        int iIntValue4 = num6 != null ? num6.intValue() : 5;
        Boolean bool2 = this.considerGeofenceAlwaysInside;
        ELogConfig eLogConfig = new ELogConfig(zBooleanValue, value, value2, iIntValue, iIntValue2, iIntValue3, iIntValue4, bool2 != null ? bool2.booleanValue() : false);
        Integer num7 = this.restReadTimeoutSec;
        int iIntValue5 = num7 != null ? num7.intValue() : 30;
        Integer num8 = this.restConnectTimeoutSec;
        RestConfig restConfig = new RestConfig(iIntValue5, num8 != null ? num8.intValue() : 30);
        SensorManagerConfig sensorsManagerConfig = new SensorsManagerConfigResponse(this.sensorSamplingRateHz, this.sensorsDataBufferSize, this.freezeSensorsDataRelevanceLimitSec, this.freezeSensorsDataRelevanceLimitPressureSec, this.useNewSensorManager, this.monitorFreezes, this.validateSamples, this.stopSessionOnSensorError, this.stopSessionIfSensorDataOutdated, this.foregroundServiceMonitoringIntervalSec, this.freezeMonitoringIntervalSec, this.freezeRecoveryWaitingDurationSec, this.freezeRestartWaitingDurationSec, this.maxSessionLengthMin, this.sensorIssuesELogIntervalSec, this.sensorsConfig, this.shouldNeverStopPressure).toSensorsManagerConfig();
        Integer num9 = this.dataLoadingRetryRequestCount;
        int iIntValue6 = num9 != null ? num9.intValue() : 3;
        Integer num10 = this.inMemoryStorageCleanUpLimit;
        int iIntValue7 = num10 != null ? num10.intValue() : 5;
        Integer num11 = this.inMemoryStorageLimit;
        int iIntValue8 = num11 != null ? num11.intValue() : 10;
        Integer num12 = this.maxConcurrentDownloadTasks;
        CommonDataRepositoryConfig commonDataRepositoryConfig = new CommonDataRepositoryConfig(iIntValue6, iIntValue8, iIntValue7, num12 != null ? num12.intValue() : 2);
        Integer num13 = this.geoAcceptedAccuracyMeters;
        int iIntValue9 = num13 != null ? num13.intValue() : 100;
        long millis = TimeUnit.SECONDS.toMillis(1L);
        Long l = this.appSessionMaxInactivitySec;
        long jLongValue = millis * (l != null ? l.longValue() : TimeUnit.HOURS.toSeconds(2L));
        Boolean bool3 = this.isSilentModeEnabled;
        boolean zBooleanValue2 = bool3 != null ? bool3.booleanValue() : false;
        Boolean bool4 = this.useFusedLocationProvider;
        MiscCommonConfig miscCommonConfig = new MiscCommonConfig(iIntValue9, jLongValue, zBooleanValue2, bool4 != null ? bool4.booleanValue() : false);
        SnappingConfigResponse snappingConfigResponse = this.snapping;
        boolean zBooleanValue3 = (snappingConfigResponse == null || (enableSnappingWhenConvertingCoordinates = snappingConfigResponse.getEnableSnappingWhenConvertingCoordinates()) == null) ? true : enableSnappingWhenConvertingCoordinates.booleanValue();
        SnappingConfigResponse snappingConfigResponse2 = this.snapping;
        double dDoubleValue = (snappingConfigResponse2 == null || (snappingWhenConvertingMaxDistanceMeters = snappingConfigResponse2.getSnappingWhenConvertingMaxDistanceMeters()) == null) ? 0.5d : snappingWhenConvertingMaxDistanceMeters.doubleValue();
        SnappingConfigResponse snappingConfigResponse3 = this.snapping;
        CommonConfig commonConfig = new CommonConfig(authConfig, eLogConfig, restConfig, sensorsManagerConfig, commonDataRepositoryConfig, miscCommonConfig, new SnappingConfig(zBooleanValue3, dDoubleValue, (snappingConfigResponse3 == null || (tooFarToSnapWarningDistanceMeters = snappingConfigResponse3.getTooFarToSnapWarningDistanceMeters()) == null) ? 25.0d : tooFarToSnapWarningDistanceMeters.doubleValue()));
        NavigationConfigResponse navigationConfigResponse = this.navigationEngine;
        if (navigationConfigResponse == null) {
            navigationConfigResponse = new NavigationConfigResponse((Boolean) null, (Double) null, (Boolean) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Boolean) null, (Double) null, (Double) null, 2047, (DefaultConstructorMarker) null);
        }
        NavigationConfig navigationConfig = navigationConfigResponse.toNavigationConfig();
        TurnByTurnConfigResponse turnByTurnConfigResponse = this.turnByTurn;
        if (turnByTurnConfigResponse == null) {
            turnByTurnConfigResponse = new TurnByTurnConfigResponse((Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Double) null, 32767, (DefaultConstructorMarker) null);
        }
        TurnByTurnConfig turnByTurnConfig = turnByTurnConfigResponse.toTurnByTurnConfig();
        Double d = this.autoCalibCheckTimeIntervalSec;
        AutoCalibConfig autoCalibConfig = new AutoCalibConfig(d != null ? d.doubleValue() : 30.0d);
        PositioningConfigResponse positioningConfigResponse = this.positioning;
        if (positioningConfigResponse == null) {
            positioningConfigResponse = new PositioningConfigResponse((Boolean) null, (Boolean) null, (Boolean) null, (Boolean) null, (Double) null, (Double) null, (Double) null, (Double) null, (Boolean) null, (Double) null, (Boolean) null, (Double) null, (Double) null, (Double) null, (Double) null, (Boolean) null, (Boolean) null, (Double) null, (Double) null, (List) null, (Double) null, (PositioningConfigResponse.AutoStopResponse) null, 4194303, (DefaultConstructorMarker) null);
        }
        PositioningConfig positioningConfig = positioningConfigResponse.toPositioningConfig();
        GeofenceConfigResponse geofenceConfigResponse = this.geofence;
        if (geofenceConfigResponse == null) {
            geofenceConfigResponse = new GeofenceConfigResponse((Float) null, (Float) null, (Double) null, (Double) null, (Double) null, (Double) null, (Boolean) null, (Double) null, (Double) null, (Boolean) null, (Double) null, (Boolean) null, l3.b, (DefaultConstructorMarker) null);
        }
        GeofenceConfig geofenceConfig = geofenceConfigResponse.toGeofenceConfig();
        ProximityConfigResponse proximityConfigResponse = this.proximity;
        if (proximityConfigResponse == null) {
            proximityConfigResponse = new ProximityConfigResponse((Double) null, (Double) null, (Double) null, (Double) null, (Double) null, (Integer) null, 63, (DefaultConstructorMarker) null);
        }
        ProximityConfig proximityConfig = proximityConfigResponse.toProximityConfig();
        PlaiConfigResponse plaiConfigResponse = this.plai;
        if (plaiConfigResponse == null) {
            plaiConfigResponse = new PlaiConfigResponse(false, 0, 0, false, 0.0d, 0L, false, 0.0d, 255, (DefaultConstructorMarker) null);
        }
        PlaiConfig plaiConfig = plaiConfigResponse.toPlaiConfig();
        Float f = this.calibrationNeededCheckIntervalMinutes;
        float fFloatValue = f != null ? f.floatValue() : 15.0f;
        Float f2 = this.defaultBuildingsFetchRadius;
        float fFloatValue2 = f2 != null ? f2.floatValue() : 15000.0f;
        Float f3 = this.nearbyBuildingsSearchRadiusMeters;
        float fFloatValue3 = f3 != null ? f3.floatValue() : 500.0f;
        Boolean bool5 = this.requiredCalibrationOnFailedCheck;
        boolean zBooleanValue4 = bool5 != null ? bool5.booleanValue() : false;
        Float f4 = this.secondsToIndicateLimitedConnection;
        float fFloatValue4 = f4 != null ? f4.floatValue() : 3.0f;
        Integer num14 = this.recoveryAttemptsLimit;
        int iIntValue10 = num14 != null ? num14.intValue() : 15;
        Float f5 = this.recoveryAttemptIntervalSec;
        float fFloatValue5 = f5 != null ? f5.floatValue() : 1.0f;
        Boolean bool6 = this.allowNoBarometerPositioningInMultifloor;
        boolean zBooleanValue5 = bool6 != null ? bool6.booleanValue() : false;
        Integer num15 = this.startPositioningRetryCount;
        int iIntValue11 = num15 != null ? num15.intValue() : 3;
        Float f6 = this.startPositioningRetryIntervalSec;
        float fFloatValue6 = f6 != null ? f6.floatValue() : 1.0f;
        Integer num16 = this.dataLoadingRetryRequestCount;
        int iIntValue12 = num16 != null ? num16.intValue() : 3;
        Double d2 = this.mapDataExpirationTimeMinutes;
        double dDoubleValue2 = d2 != null ? d2.doubleValue() : 300.0d;
        Boolean bool7 = this.isMapImagesPreloadingEnabled;
        boolean zBooleanValue6 = bool7 != null ? bool7.booleanValue() : true;
        Double d3 = this.engineSessionFetchRetryInterval;
        double dDoubleValue3 = d3 != null ? d3.doubleValue() : 1.5d;
        Integer num17 = this.engineSessionFetchRetryCount;
        int iIntValue13 = num17 != null ? num17.intValue() : 6;
        Double d4 = this.configFetchRetryInterval;
        double dDoubleValue4 = d4 != null ? d4.doubleValue() : 1.5d;
        Integer num18 = this.configFetchRetryCount;
        int iIntValue14 = num18 != null ? num18.intValue() : 10;
        Integer num19 = this.startReportingRetryCount;
        int iIntValue15 = num19 != null ? num19.intValue() : 3;
        Double d5 = this.startReportingRetryInterval;
        double dDoubleValue5 = d5 != null ? d5.doubleValue() : 1.0d;
        Boolean bool8 = this.allowClearAllCaches;
        boolean zBooleanValue7 = bool8 != null ? bool8.booleanValue() : true;
        Double d6 = this.dontClearUploadManagerCacheLastDays;
        double dDoubleValue6 = d6 != null ? d6.doubleValue() : 1.0d;
        Double d7 = this.dontClearAllELogsLastMinutes;
        double dDoubleValue7 = d7 != null ? d7.doubleValue() : 15.0d;
        Integer num20 = this.eventTagsMaxRetryCount;
        int iIntValue16 = num20 != null ? num20.intValue() : 5;
        Double d8 = this.eventTagsRetryIntervalSeconds;
        double dDoubleValue8 = d8 != null ? d8.doubleValue() : 10.0d;
        Integer num21 = this.eventTagsMaxTagsPerRetry;
        int iIntValue17 = num21 != null ? num21.intValue() : 20;
        Boolean bool9 = this.eventTagsCachingEnabled;
        boolean zBooleanValue8 = bool9 != null ? bool9.booleanValue() : true;
        Double d9 = this.deviceDataFetchTimeoutSeconds;
        double dDoubleValue9 = d9 != null ? d9.doubleValue() : 15.0d;
        Integer num22 = this.maxLiveNavigationRetryAttempts;
        int iIntValue18 = num22 != null ? num22.intValue() : 5;
        Integer num23 = this.maxProximityDataRetryAttempts;
        int iIntValue19 = num23 != null ? num23.intValue() : 5;
        Boolean bool10 = this.enableAutomaticPositioningDataPreloading;
        boolean zBooleanValue9 = bool10 != null ? bool10.booleanValue() : true;
        Double d10 = this.dataExpirationTimeDays;
        double dDoubleValue10 = d10 != null ? d10.doubleValue() : 7.0d;
        Boolean bool11 = this.isDebugDataManagerEnabled;
        boolean zBooleanValue10 = bool11 != null ? bool11.booleanValue() : false;
        Boolean bool12 = this.enablePeriodicCacheRefreshing;
        boolean zBooleanValue11 = bool12 != null ? bool12.booleanValue() : true;
        Double d11 = this.periodicCacheRefreshingTimeHours;
        RealTimeConfig realTimeConfig = new RealTimeConfig(navigationConfig, turnByTurnConfig, autoCalibConfig, positioningConfig, new MiscRealtimeConfig(fFloatValue, fFloatValue2, fFloatValue3, zBooleanValue4, fFloatValue4, iIntValue10, fFloatValue5, zBooleanValue5, iIntValue11, fFloatValue6, iIntValue12, dDoubleValue2, zBooleanValue6, dDoubleValue3, iIntValue13, dDoubleValue4, iIntValue14, iIntValue15, dDoubleValue5, zBooleanValue7, dDoubleValue6, dDoubleValue7, iIntValue16, dDoubleValue8, iIntValue17, zBooleanValue8, dDoubleValue9, iIntValue18, iIntValue19, zBooleanValue9, dDoubleValue10, zBooleanValue10, zBooleanValue11, d11 != null ? d11.doubleValue() : 24.0d), geofenceConfig, proximityConfig, plaiConfig);
        Double d12 = this.mapGridUrlExpirationTimeMinutes;
        double dDoubleValue11 = d12 != null ? d12.doubleValue() : 5.0d;
        MapGridType mapGridTypeFrom = MapGridType.INSTANCE.from(this.mapGridType);
        if (mapGridTypeFrom == null) {
            mapGridTypeFrom = MapGridType.PUBLIC;
        }
        MapGridFetchingStrategy mapGridFetchingStrategyFrom = MapGridFetchingStrategy.INSTANCE.from(this.mapGridFetchingStrategy);
        if (mapGridFetchingStrategyFrom == null) {
            mapGridFetchingStrategyFrom = MapGridFetchingStrategy.ENFORCE_MAJOR;
        }
        return new RemoteConfig(null, commonConfig, realTimeConfig, new ExtraEngineConfig(dDoubleValue11, mapGridFetchingStrategyFrom, mapGridTypeFrom), 1, null);
    }

    @NotNull
    public String toString() {
        return "RemoteConfigResponse(shouldUseElog=" + this.shouldUseElog + ", elogLevel=" + this.elogLevel + ", metricsLevel=" + this.metricsLevel + ", elogUrl=" + this.elogUrl + ", eLogQueueSize=" + this.eLogQueueSize + ", eLogReportAttemptsLimit=" + this.eLogReportAttemptsLimit + ", restReadTimeoutSec=" + this.restReadTimeoutSec + ", restConnectTimeoutSec=" + this.restConnectTimeoutSec + ", maxSessionLengthMin=" + this.maxSessionLengthMin + ", geoAcceptedAccuracyMeters=" + this.geoAcceptedAccuracyMeters + ", elogLevelSendingBatchSize=" + this.elogLevelSendingBatchSize + ", elogLevelSendingIntervalSeconds=" + this.elogLevelSendingIntervalSeconds + ", foregroundServiceMonitoringIntervalSec=" + this.foregroundServiceMonitoringIntervalSec + ", useFusedLocationProvider=" + this.useFusedLocationProvider + ", considerGeofenceAlwaysInside=" + this.considerGeofenceAlwaysInside + ", enablePeriodicCacheRefreshing=" + this.enablePeriodicCacheRefreshing + ", periodicCacheRefreshingTimeHours=" + this.periodicCacheRefreshingTimeHours + ", minDistanceToRecalculateNavRouteMeters=" + this.minDistanceToRecalculateNavRouteMeters + ", calibrationNeededCheckIntervalMinutes=" + this.calibrationNeededCheckIntervalMinutes + ", defaultBuildingsFetchRadius=" + this.defaultBuildingsFetchRadius + ", nearbyBuildingsSearchRadiusMeters=" + this.nearbyBuildingsSearchRadiusMeters + ", requiredCalibrationOnFailedCheck=" + this.requiredCalibrationOnFailedCheck + ", shouldUseTailTrimming=" + this.shouldUseTailTrimming + ", tailTrimming_maxPositionJumpMeters=" + this.tailTrimming_maxPositionJumpMeters + ", tailTrimming_AcceptableDistanceToRouteSegmentMeters=" + this.tailTrimming_AcceptableDistanceToRouteSegmentMeters + ", tailTrimming_RouteSegmentLengthMeters=" + this.tailTrimming_RouteSegmentLengthMeters + ", tailTrimming_DistanceShrinkingRation=" + this.tailTrimming_DistanceShrinkingRation + ", tailTrimming_RouteRecalculationDistanceMeters=" + this.tailTrimming_RouteRecalculationDistanceMeters + ", tailTrimming_AllowFirstWaypointTrimming=" + this.tailTrimming_AllowFirstWaypointTrimming + ", tailTrimming_FirstWaypointTrimmingMaxDistance=" + this.tailTrimming_FirstWaypointTrimmingMaxDistance + ", secondsToIndicateLimitedConnection=" + this.secondsToIndicateLimitedConnection + ", recoveryAttemptsLimit=" + this.recoveryAttemptsLimit + ", recoveryAttemptIntervalSec=" + this.recoveryAttemptIntervalSec + ", allowNoBarometerPositioningInMultifloor=" + this.allowNoBarometerPositioningInMultifloor + ", startPositioningRetryCount=" + this.startPositioningRetryCount + ", startPositioningRetryIntervalSec=" + this.startPositioningRetryIntervalSec + ", dataLoadingRetryRequestCount=" + this.dataLoadingRetryRequestCount + ", inMemoryStorageLimit=" + this.inMemoryStorageLimit + ", maxConcurrentDownloadTasks=" + this.maxConcurrentDownloadTasks + ", inMemoryStorageCleanUpLimit=" + this.inMemoryStorageCleanUpLimit + ", mapDataExpirationTimeMinutes=" + this.mapDataExpirationTimeMinutes + ", isMapImagesPreloadingEnabled=" + this.isMapImagesPreloadingEnabled + ", engineSessionFetchRetryInterval=" + this.engineSessionFetchRetryInterval + ", engineSessionFetchRetryCount=" + this.engineSessionFetchRetryCount + ", configFetchRetryInterval=" + this.configFetchRetryInterval + ", configFetchRetryCount=" + this.configFetchRetryCount + ", startReportingRetryCount=" + this.startReportingRetryCount + ", startReportingRetryInterval=" + this.startReportingRetryInterval + ", allowClearAllCaches=" + this.allowClearAllCaches + ", dontClearUploadManagerCacheLastDays=" + this.dontClearUploadManagerCacheLastDays + ", dontClearAllELogsLastMinutes=" + this.dontClearAllELogsLastMinutes + ", eventTagsMaxRetryCount=" + this.eventTagsMaxRetryCount + ", eventTagsRetryIntervalSeconds=" + this.eventTagsRetryIntervalSeconds + ", eventTagsMaxTagsPerRetry=" + this.eventTagsMaxTagsPerRetry + ", eventTagsCachingEnabled=" + this.eventTagsCachingEnabled + ", deviceDataFetchTimeoutSeconds=" + this.deviceDataFetchTimeoutSeconds + ", isAutoCalibCheckPeriodicallyEnable=" + this.isAutoCalibCheckPeriodicallyEnable + ", autoCalibCheckTimeIntervalSec=" + this.autoCalibCheckTimeIntervalSec + ", additionalPercentageToEnterGeofence=" + this.additionalPercentageToEnterGeofence + ", maxLiveNavigationRetryAttempts=" + this.maxLiveNavigationRetryAttempts + ", maxProximityDataRetryAttempts=" + this.maxProximityDataRetryAttempts + ", enableAutomaticPositioningDataPreloading=" + this.enableAutomaticPositioningDataPreloading + ", dataExpirationTimeDays=" + this.dataExpirationTimeDays + ", appSessionMaxInactivitySec=" + this.appSessionMaxInactivitySec + ", isSilentModeEnabled=" + this.isSilentModeEnabled + ", sensorSamplingRateHz=" + this.sensorSamplingRateHz + ", sensorsDataBufferSize=" + this.sensorsDataBufferSize + ", freezeSensorsDataRelevanceLimitSec=" + this.freezeSensorsDataRelevanceLimitSec + ", freezeSensorsDataRelevanceLimitPressureSec=" + this.freezeSensorsDataRelevanceLimitPressureSec + ", freezeMonitoringIntervalSec=" + this.freezeMonitoringIntervalSec + ", freezeRecoveryWaitingDurationSec=" + this.freezeRecoveryWaitingDurationSec + ", freezeRestartWaitingDurationSec=" + this.freezeRestartWaitingDurationSec + ", useNewSensorManager=" + this.useNewSensorManager + ", monitorFreezes=" + this.monitorFreezes + ", validateSamples=" + this.validateSamples + ", stopSessionOnSensorError=" + this.stopSessionOnSensorError + ", stopSessionIfSensorDataOutdated=" + this.stopSessionIfSensorDataOutdated + ", sensorIssuesELogIntervalSec=" + this.sensorIssuesELogIntervalSec + ", sensorsConfig=" + this.sensorsConfig + ", shouldNeverStopPressure=" + this.shouldNeverStopPressure + ", engine=" + this.engine + ", mapGridFetchingStrategy=" + this.mapGridFetchingStrategy + ", mapGridType=" + this.mapGridType + ", mapGridUrlExpirationTimeMinutes=" + this.mapGridUrlExpirationTimeMinutes + ", navigationEngine=" + this.navigationEngine + ", isDebugDataManagerEnabled=" + this.isDebugDataManagerEnabled + ", auth=" + this.auth + ", geofence=" + this.geofence + ", positioning=" + this.positioning + ", turnByTurn=" + this.turnByTurn + ", proximity=" + this.proximity + ", snapping=" + this.snapping + ", plai=" + this.plai + ')';
    }

    @Deprecated
    public /* synthetic */ RemoteConfigResponse(int i, int i2, int i3, Boolean bool, Integer num, Integer num2, String str, Integer num3, Integer num4, Integer num5, Integer num6, Integer num7, Integer num8, Integer num9, Integer num10, Double d, Boolean bool2, Boolean bool3, Boolean bool4, Double d2, Float f, Float f2, Float f3, Float f4, Boolean bool5, Boolean bool6, Float f5, Float f6, Float f7, Float f8, Float f9, Boolean bool7, Float f10, Float f11, Integer num11, Float f12, Boolean bool8, Integer num12, Float f13, Integer num13, Integer num14, Integer num15, Integer num16, Double d3, Boolean bool9, Double d4, Integer num17, Double d5, Integer num18, Integer num19, Double d6, Boolean bool10, Double d7, Double d8, Integer num20, Double d9, Integer num21, Boolean bool11, Double d10, Boolean bool12, Double d11, Double d12, Integer num22, Integer num23, Boolean bool13, Double d13, Long l, Boolean bool14, Double d14, Integer num24, Double d15, Double d16, Double d17, Double d18, Double d19, Boolean bool15, Boolean bool16, Boolean bool17, Boolean bool18, Boolean bool19, Double d20, SensorsConfigResponse sensorsConfigResponse, Boolean bool20, EngineConfigResponse engineConfigResponse, String str2, String str3, Double d21, NavigationConfigResponse navigationConfigResponse, Boolean bool21, AuthConfigResponse authConfigResponse, GeofenceConfigResponse geofenceConfigResponse, PositioningConfigResponse positioningConfigResponse, TurnByTurnConfigResponse turnByTurnConfigResponse, ProximityConfigResponse proximityConfigResponse, SnappingConfigResponse snappingConfigResponse, PlaiConfigResponse plaiConfigResponse, SerializationConstructorMarker serializationConstructorMarker) {
        if ((i & 1) == 0) {
            this.shouldUseElog = null;
        } else {
            this.shouldUseElog = bool;
        }
        if ((i & 2) == 0) {
            this.elogLevel = null;
        } else {
            this.elogLevel = num;
        }
        if ((i & 4) == 0) {
            this.metricsLevel = null;
        } else {
            this.metricsLevel = num2;
        }
        if ((i & 8) == 0) {
            this.elogUrl = null;
        } else {
            this.elogUrl = str;
        }
        if ((i & 16) == 0) {
            this.eLogQueueSize = null;
        } else {
            this.eLogQueueSize = num3;
        }
        if ((i & 32) == 0) {
            this.eLogReportAttemptsLimit = null;
        } else {
            this.eLogReportAttemptsLimit = num4;
        }
        if ((i & 64) == 0) {
            this.restReadTimeoutSec = null;
        } else {
            this.restReadTimeoutSec = num5;
        }
        if ((i & 128) == 0) {
            this.restConnectTimeoutSec = null;
        } else {
            this.restConnectTimeoutSec = num6;
        }
        if ((i & 256) == 0) {
            this.maxSessionLengthMin = null;
        } else {
            this.maxSessionLengthMin = num7;
        }
        if ((i & 512) == 0) {
            this.geoAcceptedAccuracyMeters = null;
        } else {
            this.geoAcceptedAccuracyMeters = num8;
        }
        if ((i & 1024) == 0) {
            this.elogLevelSendingBatchSize = null;
        } else {
            this.elogLevelSendingBatchSize = num9;
        }
        if ((i & 2048) == 0) {
            this.elogLevelSendingIntervalSeconds = null;
        } else {
            this.elogLevelSendingIntervalSeconds = num10;
        }
        if ((i & 4096) == 0) {
            this.foregroundServiceMonitoringIntervalSec = null;
        } else {
            this.foregroundServiceMonitoringIntervalSec = d;
        }
        if ((i & 8192) == 0) {
            this.useFusedLocationProvider = null;
        } else {
            this.useFusedLocationProvider = bool2;
        }
        if ((i & 16384) == 0) {
            this.considerGeofenceAlwaysInside = null;
        } else {
            this.considerGeofenceAlwaysInside = bool3;
        }
        if ((i & 32768) == 0) {
            this.enablePeriodicCacheRefreshing = null;
        } else {
            this.enablePeriodicCacheRefreshing = bool4;
        }
        if ((i & 65536) == 0) {
            this.periodicCacheRefreshingTimeHours = null;
        } else {
            this.periodicCacheRefreshingTimeHours = d2;
        }
        if ((i & 131072) == 0) {
            this.minDistanceToRecalculateNavRouteMeters = null;
        } else {
            this.minDistanceToRecalculateNavRouteMeters = f;
        }
        if ((i & 262144) == 0) {
            this.calibrationNeededCheckIntervalMinutes = null;
        } else {
            this.calibrationNeededCheckIntervalMinutes = f2;
        }
        if ((i & 524288) == 0) {
            this.defaultBuildingsFetchRadius = null;
        } else {
            this.defaultBuildingsFetchRadius = f3;
        }
        if ((i & 1048576) == 0) {
            this.nearbyBuildingsSearchRadiusMeters = null;
        } else {
            this.nearbyBuildingsSearchRadiusMeters = f4;
        }
        if ((2097152 & i) == 0) {
            this.requiredCalibrationOnFailedCheck = null;
        } else {
            this.requiredCalibrationOnFailedCheck = bool5;
        }
        if ((4194304 & i) == 0) {
            this.shouldUseTailTrimming = null;
        } else {
            this.shouldUseTailTrimming = bool6;
        }
        if ((8388608 & i) == 0) {
            this.tailTrimming_maxPositionJumpMeters = null;
        } else {
            this.tailTrimming_maxPositionJumpMeters = f5;
        }
        if ((16777216 & i) == 0) {
            this.tailTrimming_AcceptableDistanceToRouteSegmentMeters = null;
        } else {
            this.tailTrimming_AcceptableDistanceToRouteSegmentMeters = f6;
        }
        if ((33554432 & i) == 0) {
            this.tailTrimming_RouteSegmentLengthMeters = null;
        } else {
            this.tailTrimming_RouteSegmentLengthMeters = f7;
        }
        if ((67108864 & i) == 0) {
            this.tailTrimming_DistanceShrinkingRation = null;
        } else {
            this.tailTrimming_DistanceShrinkingRation = f8;
        }
        if ((134217728 & i) == 0) {
            this.tailTrimming_RouteRecalculationDistanceMeters = null;
        } else {
            this.tailTrimming_RouteRecalculationDistanceMeters = f9;
        }
        if ((268435456 & i) == 0) {
            this.tailTrimming_AllowFirstWaypointTrimming = null;
        } else {
            this.tailTrimming_AllowFirstWaypointTrimming = bool7;
        }
        if ((536870912 & i) == 0) {
            this.tailTrimming_FirstWaypointTrimmingMaxDistance = null;
        } else {
            this.tailTrimming_FirstWaypointTrimmingMaxDistance = f10;
        }
        if ((1073741824 & i) == 0) {
            this.secondsToIndicateLimitedConnection = null;
        } else {
            this.secondsToIndicateLimitedConnection = f11;
        }
        if ((i & Integer.MIN_VALUE) == 0) {
            this.recoveryAttemptsLimit = null;
        } else {
            this.recoveryAttemptsLimit = num11;
        }
        if ((i2 & 1) == 0) {
            this.recoveryAttemptIntervalSec = null;
        } else {
            this.recoveryAttemptIntervalSec = f12;
        }
        if ((i2 & 2) == 0) {
            this.allowNoBarometerPositioningInMultifloor = null;
        } else {
            this.allowNoBarometerPositioningInMultifloor = bool8;
        }
        if ((i2 & 4) == 0) {
            this.startPositioningRetryCount = null;
        } else {
            this.startPositioningRetryCount = num12;
        }
        if ((i2 & 8) == 0) {
            this.startPositioningRetryIntervalSec = null;
        } else {
            this.startPositioningRetryIntervalSec = f13;
        }
        if ((i2 & 16) == 0) {
            this.dataLoadingRetryRequestCount = null;
        } else {
            this.dataLoadingRetryRequestCount = num13;
        }
        if ((i2 & 32) == 0) {
            this.inMemoryStorageLimit = null;
        } else {
            this.inMemoryStorageLimit = num14;
        }
        if ((i2 & 64) == 0) {
            this.maxConcurrentDownloadTasks = null;
        } else {
            this.maxConcurrentDownloadTasks = num15;
        }
        if ((i2 & 128) == 0) {
            this.inMemoryStorageCleanUpLimit = null;
        } else {
            this.inMemoryStorageCleanUpLimit = num16;
        }
        if ((i2 & 256) == 0) {
            this.mapDataExpirationTimeMinutes = null;
        } else {
            this.mapDataExpirationTimeMinutes = d3;
        }
        if ((i2 & 512) == 0) {
            this.isMapImagesPreloadingEnabled = null;
        } else {
            this.isMapImagesPreloadingEnabled = bool9;
        }
        if ((i2 & 1024) == 0) {
            this.engineSessionFetchRetryInterval = null;
        } else {
            this.engineSessionFetchRetryInterval = d4;
        }
        if ((i2 & 2048) == 0) {
            this.engineSessionFetchRetryCount = null;
        } else {
            this.engineSessionFetchRetryCount = num17;
        }
        if ((i2 & 4096) == 0) {
            this.configFetchRetryInterval = null;
        } else {
            this.configFetchRetryInterval = d5;
        }
        if ((i2 & 8192) == 0) {
            this.configFetchRetryCount = null;
        } else {
            this.configFetchRetryCount = num18;
        }
        if ((i2 & 16384) == 0) {
            this.startReportingRetryCount = null;
        } else {
            this.startReportingRetryCount = num19;
        }
        if ((i2 & 32768) == 0) {
            this.startReportingRetryInterval = null;
        } else {
            this.startReportingRetryInterval = d6;
        }
        if ((i2 & 65536) == 0) {
            this.allowClearAllCaches = null;
        } else {
            this.allowClearAllCaches = bool10;
        }
        if ((i2 & 131072) == 0) {
            this.dontClearUploadManagerCacheLastDays = null;
        } else {
            this.dontClearUploadManagerCacheLastDays = d7;
        }
        if ((i2 & 262144) == 0) {
            this.dontClearAllELogsLastMinutes = null;
        } else {
            this.dontClearAllELogsLastMinutes = d8;
        }
        if ((i2 & 524288) == 0) {
            this.eventTagsMaxRetryCount = null;
        } else {
            this.eventTagsMaxRetryCount = num20;
        }
        if ((i2 & 1048576) == 0) {
            this.eventTagsRetryIntervalSeconds = null;
        } else {
            this.eventTagsRetryIntervalSeconds = d9;
        }
        if ((2097152 & i2) == 0) {
            this.eventTagsMaxTagsPerRetry = null;
        } else {
            this.eventTagsMaxTagsPerRetry = num21;
        }
        if ((4194304 & i2) == 0) {
            this.eventTagsCachingEnabled = null;
        } else {
            this.eventTagsCachingEnabled = bool11;
        }
        if ((8388608 & i2) == 0) {
            this.deviceDataFetchTimeoutSeconds = null;
        } else {
            this.deviceDataFetchTimeoutSeconds = d10;
        }
        if ((16777216 & i2) == 0) {
            this.isAutoCalibCheckPeriodicallyEnable = null;
        } else {
            this.isAutoCalibCheckPeriodicallyEnable = bool12;
        }
        if ((33554432 & i2) == 0) {
            this.autoCalibCheckTimeIntervalSec = null;
        } else {
            this.autoCalibCheckTimeIntervalSec = d11;
        }
        if ((67108864 & i2) == 0) {
            this.additionalPercentageToEnterGeofence = null;
        } else {
            this.additionalPercentageToEnterGeofence = d12;
        }
        if ((134217728 & i2) == 0) {
            this.maxLiveNavigationRetryAttempts = null;
        } else {
            this.maxLiveNavigationRetryAttempts = num22;
        }
        if ((268435456 & i2) == 0) {
            this.maxProximityDataRetryAttempts = null;
        } else {
            this.maxProximityDataRetryAttempts = num23;
        }
        if ((536870912 & i2) == 0) {
            this.enableAutomaticPositioningDataPreloading = null;
        } else {
            this.enableAutomaticPositioningDataPreloading = bool13;
        }
        if ((1073741824 & i2) == 0) {
            this.dataExpirationTimeDays = null;
        } else {
            this.dataExpirationTimeDays = d13;
        }
        if ((Integer.MIN_VALUE & i2) == 0) {
            this.appSessionMaxInactivitySec = null;
        } else {
            this.appSessionMaxInactivitySec = l;
        }
        if ((i3 & 1) == 0) {
            this.isSilentModeEnabled = null;
        } else {
            this.isSilentModeEnabled = bool14;
        }
        if ((i3 & 2) == 0) {
            this.sensorSamplingRateHz = null;
        } else {
            this.sensorSamplingRateHz = d14;
        }
        if ((i3 & 4) == 0) {
            this.sensorsDataBufferSize = null;
        } else {
            this.sensorsDataBufferSize = num24;
        }
        if ((i3 & 8) == 0) {
            this.freezeSensorsDataRelevanceLimitSec = null;
        } else {
            this.freezeSensorsDataRelevanceLimitSec = d15;
        }
        if ((i3 & 16) == 0) {
            this.freezeSensorsDataRelevanceLimitPressureSec = null;
        } else {
            this.freezeSensorsDataRelevanceLimitPressureSec = d16;
        }
        if ((i3 & 32) == 0) {
            this.freezeMonitoringIntervalSec = null;
        } else {
            this.freezeMonitoringIntervalSec = d17;
        }
        if ((i3 & 64) == 0) {
            this.freezeRecoveryWaitingDurationSec = null;
        } else {
            this.freezeRecoveryWaitingDurationSec = d18;
        }
        if ((i3 & 128) == 0) {
            this.freezeRestartWaitingDurationSec = null;
        } else {
            this.freezeRestartWaitingDurationSec = d19;
        }
        if ((i3 & 256) == 0) {
            this.useNewSensorManager = null;
        } else {
            this.useNewSensorManager = bool15;
        }
        if ((i3 & 512) == 0) {
            this.monitorFreezes = null;
        } else {
            this.monitorFreezes = bool16;
        }
        if ((i3 & 1024) == 0) {
            this.validateSamples = null;
        } else {
            this.validateSamples = bool17;
        }
        if ((i3 & 2048) == 0) {
            this.stopSessionOnSensorError = null;
        } else {
            this.stopSessionOnSensorError = bool18;
        }
        if ((i3 & 4096) == 0) {
            this.stopSessionIfSensorDataOutdated = null;
        } else {
            this.stopSessionIfSensorDataOutdated = bool19;
        }
        if ((i3 & 8192) == 0) {
            this.sensorIssuesELogIntervalSec = null;
        } else {
            this.sensorIssuesELogIntervalSec = d20;
        }
        if ((i3 & 16384) == 0) {
            this.sensorsConfig = null;
        } else {
            this.sensorsConfig = sensorsConfigResponse;
        }
        if ((i3 & 32768) == 0) {
            this.shouldNeverStopPressure = null;
        } else {
            this.shouldNeverStopPressure = bool20;
        }
        if ((i3 & 65536) == 0) {
            this.engine = null;
        } else {
            this.engine = engineConfigResponse;
        }
        if ((i3 & 131072) == 0) {
            this.mapGridFetchingStrategy = null;
        } else {
            this.mapGridFetchingStrategy = str2;
        }
        if ((i3 & 262144) == 0) {
            this.mapGridType = null;
        } else {
            this.mapGridType = str3;
        }
        if ((i3 & 524288) == 0) {
            this.mapGridUrlExpirationTimeMinutes = null;
        } else {
            this.mapGridUrlExpirationTimeMinutes = d21;
        }
        if ((i3 & 1048576) == 0) {
            this.navigationEngine = null;
        } else {
            this.navigationEngine = navigationConfigResponse;
        }
        if ((2097152 & i3) == 0) {
            this.isDebugDataManagerEnabled = null;
        } else {
            this.isDebugDataManagerEnabled = bool21;
        }
        if ((4194304 & i3) == 0) {
            this.auth = null;
        } else {
            this.auth = authConfigResponse;
        }
        if ((8388608 & i3) == 0) {
            this.geofence = null;
        } else {
            this.geofence = geofenceConfigResponse;
        }
        if ((16777216 & i3) == 0) {
            this.positioning = null;
        } else {
            this.positioning = positioningConfigResponse;
        }
        if ((33554432 & i3) == 0) {
            this.turnByTurn = null;
        } else {
            this.turnByTurn = turnByTurnConfigResponse;
        }
        if ((67108864 & i3) == 0) {
            this.proximity = null;
        } else {
            this.proximity = proximityConfigResponse;
        }
        if ((134217728 & i3) == 0) {
            this.snapping = null;
        } else {
            this.snapping = snappingConfigResponse;
        }
        if ((268435456 & i3) == 0) {
            this.plai = null;
        } else {
            this.plai = plaiConfigResponse;
        }
    }

    public RemoteConfigResponse(@Nullable Boolean bool, @Nullable Integer num, @Nullable Integer num2, @Nullable String str, @Nullable Integer num3, @Nullable Integer num4, @Nullable Integer num5, @Nullable Integer num6, @Nullable Integer num7, @Nullable Integer num8, @Nullable Integer num9, @Nullable Integer num10, @Nullable Double d, @Nullable Boolean bool2, @Nullable Boolean bool3, @Nullable Boolean bool4, @Nullable Double d2, @Nullable Float f, @Nullable Float f2, @Nullable Float f3, @Nullable Float f4, @Nullable Boolean bool5, @Nullable Boolean bool6, @Nullable Float f5, @Nullable Float f6, @Nullable Float f7, @Nullable Float f8, @Nullable Float f9, @Nullable Boolean bool7, @Nullable Float f10, @Nullable Float f11, @Nullable Integer num11, @Nullable Float f12, @Nullable Boolean bool8, @Nullable Integer num12, @Nullable Float f13, @Nullable Integer num13, @Nullable Integer num14, @Nullable Integer num15, @Nullable Integer num16, @Nullable Double d3, @Nullable Boolean bool9, @Nullable Double d4, @Nullable Integer num17, @Nullable Double d5, @Nullable Integer num18, @Nullable Integer num19, @Nullable Double d6, @Nullable Boolean bool10, @Nullable Double d7, @Nullable Double d8, @Nullable Integer num20, @Nullable Double d9, @Nullable Integer num21, @Nullable Boolean bool11, @Nullable Double d10, @Nullable Boolean bool12, @Nullable Double d11, @Nullable Double d12, @Nullable Integer num22, @Nullable Integer num23, @Nullable Boolean bool13, @Nullable Double d13, @Nullable Long l, @Nullable Boolean bool14, @Nullable Double d14, @Nullable Integer num24, @Nullable Double d15, @Nullable Double d16, @Nullable Double d17, @Nullable Double d18, @Nullable Double d19, @Nullable Boolean bool15, @Nullable Boolean bool16, @Nullable Boolean bool17, @Nullable Boolean bool18, @Nullable Boolean bool19, @Nullable Double d20, @Nullable SensorsConfigResponse sensorsConfigResponse, @Nullable Boolean bool20, @Nullable EngineConfigResponse engineConfigResponse, @Nullable String str2, @Nullable String str3, @Nullable Double d21, @Nullable NavigationConfigResponse navigationConfigResponse, @Nullable Boolean bool21, @Nullable AuthConfigResponse authConfigResponse, @Nullable GeofenceConfigResponse geofenceConfigResponse, @Nullable PositioningConfigResponse positioningConfigResponse, @Nullable TurnByTurnConfigResponse turnByTurnConfigResponse, @Nullable ProximityConfigResponse proximityConfigResponse, @Nullable SnappingConfigResponse snappingConfigResponse, @Nullable PlaiConfigResponse plaiConfigResponse) {
        this.shouldUseElog = bool;
        this.elogLevel = num;
        this.metricsLevel = num2;
        this.elogUrl = str;
        this.eLogQueueSize = num3;
        this.eLogReportAttemptsLimit = num4;
        this.restReadTimeoutSec = num5;
        this.restConnectTimeoutSec = num6;
        this.maxSessionLengthMin = num7;
        this.geoAcceptedAccuracyMeters = num8;
        this.elogLevelSendingBatchSize = num9;
        this.elogLevelSendingIntervalSeconds = num10;
        this.foregroundServiceMonitoringIntervalSec = d;
        this.useFusedLocationProvider = bool2;
        this.considerGeofenceAlwaysInside = bool3;
        this.enablePeriodicCacheRefreshing = bool4;
        this.periodicCacheRefreshingTimeHours = d2;
        this.minDistanceToRecalculateNavRouteMeters = f;
        this.calibrationNeededCheckIntervalMinutes = f2;
        this.defaultBuildingsFetchRadius = f3;
        this.nearbyBuildingsSearchRadiusMeters = f4;
        this.requiredCalibrationOnFailedCheck = bool5;
        this.shouldUseTailTrimming = bool6;
        this.tailTrimming_maxPositionJumpMeters = f5;
        this.tailTrimming_AcceptableDistanceToRouteSegmentMeters = f6;
        this.tailTrimming_RouteSegmentLengthMeters = f7;
        this.tailTrimming_DistanceShrinkingRation = f8;
        this.tailTrimming_RouteRecalculationDistanceMeters = f9;
        this.tailTrimming_AllowFirstWaypointTrimming = bool7;
        this.tailTrimming_FirstWaypointTrimmingMaxDistance = f10;
        this.secondsToIndicateLimitedConnection = f11;
        this.recoveryAttemptsLimit = num11;
        this.recoveryAttemptIntervalSec = f12;
        this.allowNoBarometerPositioningInMultifloor = bool8;
        this.startPositioningRetryCount = num12;
        this.startPositioningRetryIntervalSec = f13;
        this.dataLoadingRetryRequestCount = num13;
        this.inMemoryStorageLimit = num14;
        this.maxConcurrentDownloadTasks = num15;
        this.inMemoryStorageCleanUpLimit = num16;
        this.mapDataExpirationTimeMinutes = d3;
        this.isMapImagesPreloadingEnabled = bool9;
        this.engineSessionFetchRetryInterval = d4;
        this.engineSessionFetchRetryCount = num17;
        this.configFetchRetryInterval = d5;
        this.configFetchRetryCount = num18;
        this.startReportingRetryCount = num19;
        this.startReportingRetryInterval = d6;
        this.allowClearAllCaches = bool10;
        this.dontClearUploadManagerCacheLastDays = d7;
        this.dontClearAllELogsLastMinutes = d8;
        this.eventTagsMaxRetryCount = num20;
        this.eventTagsRetryIntervalSeconds = d9;
        this.eventTagsMaxTagsPerRetry = num21;
        this.eventTagsCachingEnabled = bool11;
        this.deviceDataFetchTimeoutSeconds = d10;
        this.isAutoCalibCheckPeriodicallyEnable = bool12;
        this.autoCalibCheckTimeIntervalSec = d11;
        this.additionalPercentageToEnterGeofence = d12;
        this.maxLiveNavigationRetryAttempts = num22;
        this.maxProximityDataRetryAttempts = num23;
        this.enableAutomaticPositioningDataPreloading = bool13;
        this.dataExpirationTimeDays = d13;
        this.appSessionMaxInactivitySec = l;
        this.isSilentModeEnabled = bool14;
        this.sensorSamplingRateHz = d14;
        this.sensorsDataBufferSize = num24;
        this.freezeSensorsDataRelevanceLimitSec = d15;
        this.freezeSensorsDataRelevanceLimitPressureSec = d16;
        this.freezeMonitoringIntervalSec = d17;
        this.freezeRecoveryWaitingDurationSec = d18;
        this.freezeRestartWaitingDurationSec = d19;
        this.useNewSensorManager = bool15;
        this.monitorFreezes = bool16;
        this.validateSamples = bool17;
        this.stopSessionOnSensorError = bool18;
        this.stopSessionIfSensorDataOutdated = bool19;
        this.sensorIssuesELogIntervalSec = d20;
        this.sensorsConfig = sensorsConfigResponse;
        this.shouldNeverStopPressure = bool20;
        this.engine = engineConfigResponse;
        this.mapGridFetchingStrategy = str2;
        this.mapGridType = str3;
        this.mapGridUrlExpirationTimeMinutes = d21;
        this.navigationEngine = navigationConfigResponse;
        this.isDebugDataManagerEnabled = bool21;
        this.auth = authConfigResponse;
        this.geofence = geofenceConfigResponse;
        this.positioning = positioningConfigResponse;
        this.turnByTurn = turnByTurnConfigResponse;
        this.proximity = proximityConfigResponse;
        this.snapping = snappingConfigResponse;
        this.plai = plaiConfigResponse;
    }

    /* JADX WARN: Illegal instructions before constructor call */
    public /* synthetic */ RemoteConfigResponse(Boolean bool, Integer num, Integer num2, String str, Integer num3, Integer num4, Integer num5, Integer num6, Integer num7, Integer num8, Integer num9, Integer num10, Double d, Boolean bool2, Boolean bool3, Boolean bool4, Double d2, Float f, Float f2, Float f3, Float f4, Boolean bool5, Boolean bool6, Float f5, Float f6, Float f7, Float f8, Float f9, Boolean bool7, Float f10, Float f11, Integer num11, Float f12, Boolean bool8, Integer num12, Float f13, Integer num13, Integer num14, Integer num15, Integer num16, Double d3, Boolean bool9, Double d4, Integer num17, Double d5, Integer num18, Integer num19, Double d6, Boolean bool10, Double d7, Double d8, Integer num20, Double d9, Integer num21, Boolean bool11, Double d10, Boolean bool12, Double d11, Double d12, Integer num22, Integer num23, Boolean bool13, Double d13, Long l, Boolean bool14, Double d14, Integer num24, Double d15, Double d16, Double d17, Double d18, Double d19, Boolean bool15, Boolean bool16, Boolean bool17, Boolean bool18, Boolean bool19, Double d20, SensorsConfigResponse sensorsConfigResponse, Boolean bool20, EngineConfigResponse engineConfigResponse, String str2, String str3, Double d21, NavigationConfigResponse navigationConfigResponse, Boolean bool21, AuthConfigResponse authConfigResponse, GeofenceConfigResponse geofenceConfigResponse, PositioningConfigResponse positioningConfigResponse, TurnByTurnConfigResponse turnByTurnConfigResponse, ProximityConfigResponse proximityConfigResponse, SnappingConfigResponse snappingConfigResponse, PlaiConfigResponse plaiConfigResponse, int i, int i2, int i3, DefaultConstructorMarker defaultConstructorMarker) {
        Boolean bool22 = (i & 1) != 0 ? null : bool;
        Integer num25 = (i & 2) != 0 ? null : num;
        Integer num26 = (i & 4) != 0 ? null : num2;
        String str4 = (i & 8) != 0 ? null : str;
        Integer num27 = (i & 16) != 0 ? null : num3;
        Integer num28 = (i & 32) != 0 ? null : num4;
        Integer num29 = (i & 64) != 0 ? null : num5;
        Integer num30 = (i & 128) != 0 ? null : num6;
        Integer num31 = (i & 256) != 0 ? null : num7;
        Integer num32 = (i & 512) != 0 ? null : num8;
        Integer num33 = (i & 1024) != 0 ? null : num9;
        Integer num34 = (i & 2048) != 0 ? null : num10;
        Double d22 = (i & 4096) != 0 ? null : d;
        Boolean bool23 = bool22;
        Boolean bool24 = (i & 8192) != 0 ? null : bool2;
        Boolean bool25 = (i & 16384) != 0 ? null : bool3;
        Boolean bool26 = (i & 32768) != 0 ? null : bool4;
        Double d23 = (i & 65536) != 0 ? null : d2;
        Float f14 = (i & 131072) != 0 ? null : f;
        Float f15 = (i & 262144) != 0 ? null : f2;
        Float f16 = (i & 524288) != 0 ? null : f3;
        Float f17 = (i & 1048576) != 0 ? null : f4;
        Boolean bool27 = (i & 2097152) != 0 ? null : bool5;
        Boolean bool28 = (i & 4194304) != 0 ? null : bool6;
        Float f18 = (i & 8388608) != 0 ? null : f5;
        Float f19 = (i & 16777216) != 0 ? null : f6;
        Float f20 = (i & 33554432) != 0 ? null : f7;
        Float f21 = (i & 67108864) != 0 ? null : f8;
        Float f22 = (i & 134217728) != 0 ? null : f9;
        Boolean bool29 = (i & 268435456) != 0 ? null : bool7;
        Float f23 = (i & 536870912) != 0 ? null : f10;
        Float f24 = (i & 1073741824) != 0 ? null : f11;
        Integer num35 = (i & Integer.MIN_VALUE) != 0 ? null : num11;
        this(bool23, num25, num26, str4, num27, num28, num29, num30, num31, num32, num33, num34, d22, bool24, bool25, bool26, d23, f14, f15, f16, f17, bool27, bool28, f18, f19, f20, f21, f22, bool29, f23, f24, num35, (i2 & 1) != 0 ? null : f12, (i2 & 2) != 0 ? null : bool8, (i2 & 4) != 0 ? null : num12, (i2 & 8) != 0 ? null : f13, (i2 & 16) != 0 ? null : num13, (i2 & 32) != 0 ? null : num14, (i2 & 64) != 0 ? null : num15, (i2 & 128) != 0 ? null : num16, (i2 & 256) != 0 ? null : d3, (i2 & 512) != 0 ? null : bool9, (i2 & 1024) != 0 ? null : d4, (i2 & 2048) != 0 ? null : num17, (i2 & 4096) != 0 ? null : d5, (i2 & 8192) != 0 ? null : num18, (i2 & 16384) != 0 ? null : num19, (i2 & 32768) != 0 ? null : d6, (i2 & 65536) != 0 ? null : bool10, (i2 & 131072) != 0 ? null : d7, (i2 & 262144) != 0 ? null : d8, (i2 & 524288) != 0 ? null : num20, (i2 & 1048576) != 0 ? null : d9, (i2 & 2097152) != 0 ? null : num21, (i2 & 4194304) != 0 ? null : bool11, (i2 & 8388608) != 0 ? null : d10, (i2 & 16777216) != 0 ? null : bool12, (i2 & 33554432) != 0 ? null : d11, (i2 & 67108864) != 0 ? null : d12, (i2 & 134217728) != 0 ? null : num22, (i2 & 268435456) != 0 ? null : num23, (i2 & 536870912) != 0 ? null : bool13, (i2 & 1073741824) != 0 ? null : d13, (i2 & Integer.MIN_VALUE) != 0 ? null : l, (i3 & 1) != 0 ? null : bool14, (i3 & 2) != 0 ? null : d14, (i3 & 4) != 0 ? null : num24, (i3 & 8) != 0 ? null : d15, (i3 & 16) != 0 ? null : d16, (i3 & 32) != 0 ? null : d17, (i3 & 64) != 0 ? null : d18, (i3 & 128) != 0 ? null : d19, (i3 & 256) != 0 ? null : bool15, (i3 & 512) != 0 ? null : bool16, (i3 & 1024) != 0 ? null : bool17, (i3 & 2048) != 0 ? null : bool18, (i3 & 4096) != 0 ? null : bool19, (i3 & 8192) != 0 ? null : d20, (i3 & 16384) != 0 ? null : sensorsConfigResponse, (i3 & 32768) != 0 ? null : bool20, (i3 & 65536) != 0 ? null : engineConfigResponse, (i3 & 131072) != 0 ? null : str2, (i3 & 262144) != 0 ? null : str3, (i3 & 524288) != 0 ? null : d21, (i3 & 1048576) != 0 ? null : navigationConfigResponse, (i3 & 2097152) != 0 ? null : bool21, (i3 & 4194304) != 0 ? null : authConfigResponse, (i3 & 8388608) != 0 ? null : geofenceConfigResponse, (i3 & 16777216) != 0 ? null : positioningConfigResponse, (i3 & 33554432) != 0 ? null : turnByTurnConfigResponse, (i3 & 67108864) != 0 ? null : proximityConfigResponse, (i3 & 134217728) != 0 ? null : snappingConfigResponse, (i3 & 268435456) != 0 ? null : plaiConfigResponse);
    }
}
